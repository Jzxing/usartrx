
83usartrx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080047d8  080047d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047d8  080047d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000134  20000134  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3e2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7a  00000000  00000000  0002b482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000770  00000000  00000000  0002d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002079d  00000000  00000000  0002e098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd0f  00000000  00000000  0004e835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1756  00000000  00000000  0005b544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011cc9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002630  00000000  00000000  0011ccec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004714 	.word	0x08004714

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004714 	.word	0x08004714

080001d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 80001dc:	1d39      	adds	r1, r7, #4
 80001de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001e2:	2201      	movs	r2, #1
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <__io_putchar+0x20>)
 80001e6:	f002 fb49 	bl	800287c <HAL_UART_Transmit>
	return ch;
 80001ea:	687b      	ldr	r3, [r7, #4]
}
 80001ec:	4618      	mov	r0, r3
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	2000008c 	.word	0x2000008c

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 faac 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f818 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f000 f8a4 	bl	8000350 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000208:	f000 f872 	bl	80002f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_Data, 10); //�?启接收中断，接收10个数据到Rx_Data
 800020c:	220a      	movs	r2, #10
 800020e:	4906      	ldr	r1, [pc, #24]	; (8000228 <main+0x30>)
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x34>)
 8000212:	f002 fbc7 	bl	80029a4 <HAL_UART_Receive_IT>

          HAL_UART_Transmit(&huart1,rxdata1, 10, 0xffff);// 将接收成功的数据通过串口发出�??
      }
    */
    /* USER CODE END WHILE */
	  printf("Hello World!\n");
 8000216:	4806      	ldr	r0, [pc, #24]	; (8000230 <main+0x38>)
 8000218:	f003 fdec 	bl	8003df4 <puts>
	  HAL_Delay(1000);
 800021c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000220:	f000 fb00 	bl	8000824 <HAL_Delay>
  {
 8000224:	e7f7      	b.n	8000216 <main+0x1e>
 8000226:	bf00      	nop
 8000228:	20000110 	.word	0x20000110
 800022c:	2000008c 	.word	0x2000008c
 8000230:	0800472c 	.word	0x0800472c

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b0a6      	sub	sp, #152	; 0x98
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fd60 	bl	8003d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2258      	movs	r2, #88	; 0x58
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f003 fd52 	bl	8003d08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000280:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fdfc 	bl	8000e90 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800029e:	f000 f8b3 	bl	8000408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 fe3a 	bl	8001f38 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ca:	f000 f89d 	bl	8000408 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 f863 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e4:	f000 f890 	bl	8000408 <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3798      	adds	r7, #152	; 0x98
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_USART1_UART_Init+0x58>)
 80002f6:	4a15      	ldr	r2, [pc, #84]	; (800034c <MX_USART1_UART_Init+0x5c>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <MX_USART1_UART_Init+0x58>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_USART1_UART_Init+0x58>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_USART1_UART_Init+0x58>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_USART1_UART_Init+0x58>)
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	; (8000348 <MX_USART1_UART_Init+0x58>)
 8000334:	f002 fa54 	bl	80027e0 <HAL_UART_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800033e:	f000 f863 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000008c 	.word	0x2000008c
 800034c:	40013800 	.word	0x40013800

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a1a      	ldr	r2, [pc, #104]	; (80003c4 <MX_GPIO_Init+0x74>)
 800035c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000360:	6153      	str	r3, [r2, #20]
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a14      	ldr	r2, [pc, #80]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_GPIO_Init+0x74>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x74>)
 800038c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_GPIO_Init+0x74>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_GPIO_Init+0x74>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a08      	ldr	r2, [pc, #32]	; (80003c4 <MX_GPIO_Init+0x74>)
 80003a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_GPIO_Init+0x74>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	/* 将接收成功的数据通过串口发出*/
	if(huart->Instance == USART1){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a09      	ldr	r2, [pc, #36]	; (80003fc <HAL_UART_RxCpltCallback+0x34>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d10b      	bne.n	80003f2 <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Transmit(&huart1,Rx_Data, 10, 0xffff);
 80003da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003de:	220a      	movs	r2, #10
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <HAL_UART_RxCpltCallback+0x38>)
 80003e2:	4808      	ldr	r0, [pc, #32]	; (8000404 <HAL_UART_RxCpltCallback+0x3c>)
 80003e4:	f002 fa4a 	bl	800287c <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, (uint8_t *)Rx_Data, 10); //重新�?启，接收10个数据到Rx_Data
 80003e8:	220a      	movs	r2, #10
 80003ea:	4905      	ldr	r1, [pc, #20]	; (8000400 <HAL_UART_RxCpltCallback+0x38>)
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <HAL_UART_RxCpltCallback+0x3c>)
 80003ee:	f002 fad9 	bl	80029a4 <HAL_UART_Receive_IT>
	}


}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40013800 	.word	0x40013800
 8000400:	20000110 	.word	0x20000110
 8000404:	2000008c 	.word	0x2000008c

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000410:	e7fe      	b.n	8000410 <Error_Handler+0x8>
	...

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x44>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x44>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x44>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_MspInit+0x44>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <HAL_MspInit+0x44>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_MspInit+0x44>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0314 	add.w	r3, r7, #20
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
 8000472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a29      	ldr	r2, [pc, #164]	; (8000520 <HAL_UART_MspInit+0xc4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d14b      	bne.n	8000516 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800047e:	4b29      	ldr	r3, [pc, #164]	; (8000524 <HAL_UART_MspInit+0xc8>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a28      	ldr	r2, [pc, #160]	; (8000524 <HAL_UART_MspInit+0xc8>)
 8000484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <HAL_UART_MspInit+0xc8>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <HAL_UART_MspInit+0xc8>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a22      	ldr	r2, [pc, #136]	; (8000524 <HAL_UART_MspInit+0xc8>)
 800049c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <HAL_UART_MspInit+0xc8>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <HAL_UART_MspInit+0xc8>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_UART_MspInit+0xc8>)
 80004b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <HAL_UART_MspInit+0xc8>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PE1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004c6:	2310      	movs	r3, #16
 80004c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2303      	movs	r3, #3
 80004d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004d6:	2307      	movs	r3, #7
 80004d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <HAL_UART_MspInit+0xcc>)
 80004e2:	f000 fb4b 	bl	8000b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004e6:	2302      	movs	r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f2:	2303      	movs	r3, #3
 80004f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004f6:	2307      	movs	r3, #7
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <HAL_UART_MspInit+0xd0>)
 8000502:	f000 fb3b 	bl	8000b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2025      	movs	r0, #37	; 0x25
 800050c:	f000 fa89 	bl	8000a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000510:	2025      	movs	r0, #37	; 0x25
 8000512:	f000 faa2 	bl	8000a5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000516:	bf00      	nop
 8000518:	3728      	adds	r7, #40	; 0x28
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40013800 	.word	0x40013800
 8000524:	40021000 	.word	0x40021000
 8000528:	48000800 	.word	0x48000800
 800052c:	48001000 	.word	0x48001000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f932 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <USART1_IRQHandler+0x10>)
 800058a:	f002 fa59 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000008c 	.word	0x2000008c

08000598 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	e00a      	b.n	80005c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005aa:	f3af 8000 	nop.w
 80005ae:	4601      	mov	r1, r0
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	60ba      	str	r2, [r7, #8]
 80005b6:	b2ca      	uxtb	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	3301      	adds	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf0      	blt.n	80005aa <_read+0x12>
	}

return len;
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fdf1 	bl	80001d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x12>
	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_close>:

int _close(int file)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	return -1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000632:	605a      	str	r2, [r3, #4]
	return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_isatty>:

int _isatty(int file)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	return 1;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f003 fb06 	bl	8003cb4 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20010000 	.word	0x20010000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	2000011c 	.word	0x2000011c
 80006dc:	20000138 	.word	0x20000138

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0b      	ldr	r4, [pc, #44]	; (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff ffd7 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f003 fac5 	bl	8003cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fd5f 	bl	80001f8 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000748:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 800074c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000750:	20000134 	.word	0x20000134

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_Init+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_Init+0x28>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f94f 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076e:	200f      	movs	r0, #15
 8000770:	f000 f808 	bl	8000784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000774:	f7ff fe4e 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40022000 	.word	0x40022000

08000784 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x54>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x58>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	fbb3 f3f1 	udiv	r3, r3, r1
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f967 	bl	8000a76 <HAL_SYSTICK_Config>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00e      	b.n	80007d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d80a      	bhi.n	80007ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f000 f92f 	bl	8000a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_InitTick+0x5c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000120 	.word	0x20000120

0800080c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000120 	.word	0x20000120

08000824 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff ffee 	bl	800080c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800084a:	bf00      	nop
 800084c:	f7ff ffde 	bl	800080c <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	db0b      	blt.n	80008fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 021f 	and.w	r2, r3, #31
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <__NVIC_EnableIRQ+0x38>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	2001      	movs	r0, #1
 80008f2:	fa00 f202 	lsl.w	r2, r0, r2
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d8:	d301      	bcc.n	80009de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2301      	movs	r3, #1
 80009dc:	e00f      	b.n	80009fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SysTick_Config+0x40>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e6:	210f      	movs	r1, #15
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f7ff ff8e 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SysTick_Config+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Config+0x40>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff29 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff3e 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ff8e 	bl	8000960 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff5d 	bl	800090c <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff31 	bl	80008d0 <__NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffa2 	bl	80009c8 <SysTick_Config>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d008      	beq.n	8000ab2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e020      	b.n	8000af4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 020e 	bic.w	r2, r2, #14
 8000ac0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0201 	bic.w	r2, r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d005      	beq.n	8000b22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2204      	movs	r2, #4
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	e027      	b.n	8000b72 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 020e 	bic.w	r2, r2, #14
 8000b30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f022 0201 	bic.w	r2, r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b50:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	4798      	blx	r3
    } 
  }
  return status;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e160      	b.n	8000e4e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8152 	beq.w	8000e48 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 80ac 	beq.w	8000e48 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b5e      	ldr	r3, [pc, #376]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a5d      	ldr	r2, [pc, #372]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b5b      	ldr	r3, [pc, #364]	; (8000e6c <HAL_GPIO_Init+0x2f0>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a59      	ldr	r2, [pc, #356]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d025      	beq.n	8000d80 <HAL_GPIO_Init+0x204>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4f      	ldr	r2, [pc, #316]	; (8000e74 <HAL_GPIO_Init+0x2f8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d01f      	beq.n	8000d7c <HAL_GPIO_Init+0x200>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a4e      	ldr	r2, [pc, #312]	; (8000e78 <HAL_GPIO_Init+0x2fc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d019      	beq.n	8000d78 <HAL_GPIO_Init+0x1fc>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a4d      	ldr	r2, [pc, #308]	; (8000e7c <HAL_GPIO_Init+0x300>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x1f8>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	; (8000e80 <HAL_GPIO_Init+0x304>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x1f4>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4b      	ldr	r2, [pc, #300]	; (8000e84 <HAL_GPIO_Init+0x308>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x1f0>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4a      	ldr	r2, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x30c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x1ec>
 8000d64:	2306      	movs	r3, #6
 8000d66:	e00c      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d68:	2307      	movs	r3, #7
 8000d6a:	e00a      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	e008      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d74:	2303      	movs	r3, #3
 8000d76:	e004      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	e002      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d80:	2300      	movs	r3, #0
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	f002 0203 	and.w	r2, r2, #3
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	4093      	lsls	r3, r2
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d92:	4937      	ldr	r1, [pc, #220]	; (8000e70 <HAL_GPIO_Init+0x2f4>)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e18:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_GPIO_Init+0x310>)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f47f ae97 	bne.w	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	371c      	adds	r7, #28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010000 	.word	0x40010000
 8000e74:	48000400 	.word	0x48000400
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	48000c00 	.word	0x48000c00
 8000e80:	48001000 	.word	0x48001000
 8000e84:	48001400 	.word	0x48001400
 8000e88:	48001800 	.word	0x48001800
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ea0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ea6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f001 b83a 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 816f 	beq.w	80011aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ecc:	4bb5      	ldr	r3, [pc, #724]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4bb2      	ldr	r3, [pc, #712]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d15c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ee4:	4baf      	ldr	r3, [pc, #700]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d155      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x94>
 8000f1e:	4ba1      	ldr	r3, [pc, #644]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e015      	b.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f4c:	4b95      	ldr	r3, [pc, #596]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f54:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f58:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f68:	fab2 f282 	clz	r2, r2
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	f002 021f 	and.w	r2, r2, #31
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8111 	beq.w	80011a8 <HAL_RCC_OscConfig+0x318>
 8000f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8108 	bne.w	80011a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f000 bfc6 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12e>
 8000fb0:	4b7c      	ldr	r3, [pc, #496]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a7b      	ldr	r2, [pc, #492]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e036      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x158>
 8000fce:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a74      	ldr	r2, [pc, #464]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a71      	ldr	r2, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e021      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x184>
 8000ffa:	4b6a      	ldr	r3, [pc, #424]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a69      	ldr	r2, [pc, #420]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b67      	ldr	r3, [pc, #412]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a66      	ldr	r2, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8001014:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a62      	ldr	r2, [pc, #392]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001030:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d059      	beq.n	80010f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fbe6 	bl	800080c <HAL_GetTick>
 8001040:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001046:	f7ff fbe1 	bl	800080c <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d902      	bls.n	800105c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	f000 bf67 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 800105c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001060:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001070:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001074:	fab3 f383 	clz	r3, r3
 8001078:	b2db      	uxtb	r3, r3
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d102      	bne.n	800108e <HAL_RCC_OscConfig+0x1fe>
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x22a>
 800108e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001092:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001096:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800109a:	fa93 f3a3 	rbit	r3, r3
 800109e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80010ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	f042 0220 	orr.w	r2, r2, #32
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f002 021f 	and.w	r2, r2, #31
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0ab      	beq.n	8001046 <HAL_RCC_OscConfig+0x1b6>
 80010ee:	e05c      	b.n	80011aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb8c 	bl	800080c <HAL_GetTick>
 80010f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fa:	f7ff fb87 	bl	800080c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d902      	bls.n	8001110 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	f000 bf0d 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001114:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800111c:	fa93 f3a3 	rbit	r3, r3
 8001120:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001124:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x2b2>
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x2de>
 8001142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001146:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800115e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001162:	fa93 f3a3 	rbit	r3, r3
 8001166:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_RCC_OscConfig+0x314>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001172:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001176:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800117a:	fa92 f2a2 	rbit	r2, r2
 800117e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001182:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001186:	fab2 f282 	clz	r2, r2
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f042 0220 	orr.w	r2, r2, #32
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f002 021f 	and.w	r2, r2, #31
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1ab      	bne.n	80010fa <HAL_RCC_OscConfig+0x26a>
 80011a2:	e002      	b.n	80011aa <HAL_RCC_OscConfig+0x31a>
 80011a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 817f 	beq.w	80014be <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c0:	4ba7      	ldr	r3, [pc, #668]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011cc:	4ba4      	ldr	r3, [pc, #656]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d173      	bne.n	80012c0 <HAL_RCC_OscConfig+0x430>
 80011d8:	4ba1      	ldr	r3, [pc, #644]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e4:	d16c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x430>
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80011f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d102      	bne.n	8001216 <HAL_RCC_OscConfig+0x386>
 8001210:	4b93      	ldr	r3, [pc, #588]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	e013      	b.n	800123e <HAL_RCC_OscConfig+0x3ae>
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800122e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001232:	fa93 f3a3 	rbit	r3, r3
 8001236:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800123a:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2202      	movs	r2, #2
 8001240:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001244:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001248:	fa92 f2a2 	rbit	r2, r2
 800124c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001250:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001254:	fab2 f282 	clz	r2, r2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f002 021f 	and.w	r2, r2, #31
 8001264:	2101      	movs	r1, #1
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00a      	beq.n	8001286 <HAL_RCC_OscConfig+0x3f6>
 8001270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001274:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d002      	beq.n	8001286 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	f000 be52 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b76      	ldr	r3, [pc, #472]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001292:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	21f8      	movs	r1, #248	; 0xf8
 800129c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012a4:	fa91 f1a1 	rbit	r1, r1
 80012a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012b0:	fab1 f181 	clz	r1, r1
 80012b4:	b2c9      	uxtb	r1, r1
 80012b6:	408b      	lsls	r3, r1
 80012b8:	4969      	ldr	r1, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e0fe      	b.n	80014be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8088 	beq.w	80013e2 <HAL_RCC_OscConfig+0x552>
 80012d2:	2301      	movs	r3, #1
 80012d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80012e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	461a      	mov	r2, r3
 80012fa:	2301      	movs	r3, #1
 80012fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fa85 	bl	800080c <HAL_GetTick>
 8001302:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001306:	e00a      	b.n	800131e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fa80 	bl	800080c <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d902      	bls.n	800131e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	f000 be06 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001330:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d102      	bne.n	800134e <HAL_RCC_OscConfig+0x4be>
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	e013      	b.n	8001376 <HAL_RCC_OscConfig+0x4e6>
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001366:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	2202      	movs	r2, #2
 8001378:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800137c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001380:	fa92 f2a2 	rbit	r2, r2
 8001384:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001388:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800138c:	fab2 f282 	clz	r2, r2
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	f042 0220 	orr.w	r2, r2, #32
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f002 021f 	and.w	r2, r2, #31
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0af      	beq.n	8001308 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	21f8      	movs	r1, #248	; 0xf8
 80013be:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013c6:	fa91 f1a1 	rbit	r1, r1
 80013ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80013ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013d2:	fab1 f181 	clz	r1, r1
 80013d6:	b2c9      	uxtb	r1, r1
 80013d8:	408b      	lsls	r3, r1
 80013da:	4921      	ldr	r1, [pc, #132]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e06d      	b.n	80014be <HAL_RCC_OscConfig+0x62e>
 80013e2:	2301      	movs	r3, #1
 80013e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80013ec:	fa93 f3a3 	rbit	r3, r3
 80013f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80013f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f8:	fab3 f383 	clz	r3, r3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001402:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	461a      	mov	r2, r3
 800140a:	2300      	movs	r3, #0
 800140c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff f9fd 	bl	800080c <HAL_GetTick>
 8001412:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e00a      	b.n	800142e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff f9f8 	bl	800080c <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d902      	bls.n	800142e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	f000 bd7e 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001440:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_RCC_OscConfig+0x5d4>
 8001458:	4b01      	ldr	r3, [pc, #4]	; (8001460 <HAL_RCC_OscConfig+0x5d0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	e016      	b.n	800148c <HAL_RCC_OscConfig+0x5fc>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000
 8001464:	2302      	movs	r3, #2
 8001466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800146e:	fa93 f3a3 	rbit	r3, r3
 8001472:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800147c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001488:	4bbf      	ldr	r3, [pc, #764]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	2202      	movs	r2, #2
 800148e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001492:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001496:	fa92 f2a2 	rbit	r2, r2
 800149a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800149e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014a2:	fab2 f282 	clz	r2, r2
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	f042 0220 	orr.w	r2, r2, #32
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	f002 021f 	and.w	r2, r2, #31
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f202 	lsl.w	r2, r1, r2
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ac      	bne.n	8001418 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8113 	beq.w	80016fa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d07c      	beq.n	80015de <HAL_RCC_OscConfig+0x74e>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80014f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	461a      	mov	r2, r3
 8001502:	4ba2      	ldr	r3, [pc, #648]	; (800178c <HAL_RCC_OscConfig+0x8fc>)
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	461a      	mov	r2, r3
 800150a:	2301      	movs	r3, #1
 800150c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff f97d 	bl	800080c <HAL_GetTick>
 8001512:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff f978 	bl	800080c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d902      	bls.n	800152e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	f000 bcfe 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001538:	fa93 f2a3 	rbit	r2, r3
 800153c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001540:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800154e:	2202      	movs	r2, #2
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f2a3 	rbit	r2, r3
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800158c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b7e      	ldr	r3, [pc, #504]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800159a:	2102      	movs	r1, #2
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f1a3 	rbit	r1, r3
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015b4:	6019      	str	r1, [r3, #0]
  return result;
 80015b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d09d      	beq.n	8001518 <HAL_RCC_OscConfig+0x688>
 80015dc:	e08d      	b.n	80016fa <HAL_RCC_OscConfig+0x86a>
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001600:	601a      	str	r2, [r3, #0]
  return result;
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800160a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b5d      	ldr	r3, [pc, #372]	; (800178c <HAL_RCC_OscConfig+0x8fc>)
 8001616:	4413      	add	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	461a      	mov	r2, r3
 800161c:	2300      	movs	r3, #0
 800161e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff f8f4 	bl	800080c <HAL_GetTick>
 8001624:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162a:	f7ff f8ef 	bl	800080c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d902      	bls.n	8001640 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	f000 bc75 	b.w	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001650:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800165e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800168c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001690:	2202      	movs	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001698:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	fa93 f2a3 	rbit	r2, r3
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 80016ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016b8:	2102      	movs	r1, #2
 80016ba:	6019      	str	r1, [r3, #0]
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f1a3 	rbit	r1, r3
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d2:	6019      	str	r1, [r3, #0]
  return result;
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d197      	bne.n	800162a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 81a5 	beq.w	8001a5a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_RCC_OscConfig+0x8f8>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001748:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_RCC_OscConfig+0x900>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_RCC_OscConfig+0x900>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x900>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001766:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001768:	f7ff f850 	bl	800080c <HAL_GetTick>
 800176c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e010      	b.n	8001794 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff f84b 	bl	800080c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d908      	bls.n	8001794 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e3d1      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	10908120 	.word	0x10908120
 8001790:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b8d      	ldr	r3, [pc, #564]	; (80019cc <HAL_RCC_OscConfig+0xb3c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0e8      	beq.n	8001772 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x92e>
 80017b0:	4b87      	ldr	r3, [pc, #540]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a86      	ldr	r2, [pc, #536]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e035      	b.n	800182a <HAL_RCC_OscConfig+0x99a>
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x958>
 80017ce:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a7c      	ldr	r2, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6213      	str	r3, [r2, #32]
 80017e6:	e020      	b.n	800182a <HAL_RCC_OscConfig+0x99a>
 80017e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x982>
 80017f8:	4b75      	ldr	r3, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4a74      	ldr	r2, [pc, #464]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6213      	str	r3, [r2, #32]
 8001804:	4b72      	ldr	r3, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x99a>
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a6e      	ldr	r2, [pc, #440]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a6b      	ldr	r2, [pc, #428]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8081 	beq.w	800193e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7fe ffe6 	bl	800080c <HAL_GetTick>
 8001840:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7fe ffe1 	bl	800080c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e365      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001886:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001892:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018a4:	601a      	str	r2, [r3, #0]
  return result;
 80018a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018aa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d102      	bne.n	80018ca <HAL_RCC_OscConfig+0xa3a>
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	e013      	b.n	80018f2 <HAL_RCC_OscConfig+0xa62>
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018d2:	2202      	movs	r2, #2
 80018d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018da:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018fa:	2102      	movs	r1, #2
 80018fc:	6011      	str	r1, [r2, #0]
 80018fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001902:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	fa92 f1a2 	rbit	r1, r2
 800190c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001910:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001914:	6011      	str	r1, [r2, #0]
  return result;
 8001916:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800191a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d084      	beq.n	8001846 <HAL_RCC_OscConfig+0x9b6>
 800193c:	e083      	b.n	8001a46 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7fe ff65 	bl	800080c <HAL_GetTick>
 8001942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7fe ff60 	bl	800080c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f241 3288 	movw	r2, #5000	; 0x1388
 8001958:	4293      	cmp	r3, r2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2e4      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001964:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001970:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800198c:	2202      	movs	r2, #2
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001994:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019a6:	601a      	str	r2, [r3, #0]
  return result;
 80019a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019b0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0xb44>
 80019c6:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <HAL_RCC_OscConfig+0xb40>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	e017      	b.n	80019fc <HAL_RCC_OscConfig+0xb6c>
 80019cc:	40007000 	.word	0x40007000
 80019d0:	40021000 	.word	0x40021000
 80019d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	4bb3      	ldr	r3, [pc, #716]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a04:	2102      	movs	r1, #2
 8001a06:	6011      	str	r1, [r2, #0]
 8001a08:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a0c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	fa92 f1a2 	rbit	r1, r2
 8001a16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a1a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a1e:	6011      	str	r1, [r2, #0]
  return result;
 8001a20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a24:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d180      	bne.n	8001948 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a46:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4e:	4b9e      	ldr	r3, [pc, #632]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	4a9d      	ldr	r2, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a58:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 825e 	beq.w	8001f28 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	f000 821f 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	f040 8170 	bne.w	8001d6c <HAL_RCC_OscConfig+0xedc>
 8001a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a90:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ab0:	601a      	str	r2, [r3, #0]
  return result;
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fe9b 	bl	800080c <HAL_GetTick>
 8001ad6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e009      	b.n	8001af0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fe96 	bl	800080c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e21c      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b14:	601a      	str	r2, [r3, #0]
  return result;
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0xcaa>
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e027      	b.n	8001b8a <HAL_RCC_OscConfig+0xcfa>
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	fa93 f2a3 	rbit	r2, r3
 8001b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b72:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fa93 f2a3 	rbit	r2, r3
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b92:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b96:	6011      	str	r1, [r2, #0]
 8001b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	fa92 f1a2 	rbit	r1, r2
 8001ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001baa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bae:	6011      	str	r1, [r2, #0]
  return result;
 8001bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d182      	bne.n	8001adc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	f023 020f 	bic.w	r2, r3, #15
 8001bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	4937      	ldr	r1, [pc, #220]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a19      	ldr	r1, [r3, #32]
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	492d      	ldr	r1, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	fa93 f2a3 	rbit	r2, r3
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c3c:	601a      	str	r2, [r3, #0]
  return result;
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c46:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7fe fdd5 	bl	800080c <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c66:	e009      	b.n	8001c7c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe fdd0 	bl	800080c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e156      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ca0:	601a      	str	r2, [r3, #0]
  return result;
 8001ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001caa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0xe3c>
 8001cc0:	4b01      	ldr	r3, [pc, #4]	; (8001cc8 <HAL_RCC_OscConfig+0xe38>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	e02a      	b.n	8001d1c <HAL_RCC_OscConfig+0xe8c>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cde:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b86      	ldr	r3, [pc, #536]	; (8001f34 <HAL_RCC_OscConfig+0x10a4>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d3c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d46:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f43f af7f 	beq.w	8001c68 <HAL_RCC_OscConfig+0xdd8>
 8001d6a:	e0dd      	b.n	8001f28 <HAL_RCC_OscConfig+0x1098>
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d90:	601a      	str	r2, [r3, #0]
  return result;
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d9a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	fab3 f383 	clz	r3, r3
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	461a      	mov	r2, r3
 8001dae:	2300      	movs	r3, #0
 8001db0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7fe fd2b 	bl	800080c <HAL_GetTick>
 8001db6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dba:	e009      	b.n	8001dd0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe fd26 	bl	800080c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0ac      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001df4:	601a      	str	r2, [r3, #0]
  return result;
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001dfe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0xf8a>
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x10a4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	e027      	b.n	8001e6a <HAL_RCC_OscConfig+0xfda>
 8001e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e44:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x10a4>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e6e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e72:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e76:	6011      	str	r1, [r2, #0]
 8001e78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	fa92 f1a2 	rbit	r1, r2
 8001e86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e8a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e8e:	6011      	str	r1, [r2, #0]
  return result;
 8001e90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e94:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d182      	bne.n	8001dbc <HAL_RCC_OscConfig+0xf2c>
 8001eb6:	e037      	b.n	8001f28 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e02e      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_OscConfig+0x10a4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_RCC_OscConfig+0x10a4>)
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001edc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ee0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d117      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ef4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001ef8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09e      	sub	sp, #120	; 0x78
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e162      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	498b      	ldr	r1, [pc, #556]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e14a      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	497f      	ldr	r1, [pc, #508]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80dc 	beq.w	8002164 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d13c      	bne.n	800202e <HAL_RCC_ClockConfig+0xf6>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_ClockConfig+0xa6>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCC_ClockConfig+0xc6>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	65ba      	str	r2, [r7, #88]	; 0x58
 8002004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800200c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d17b      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0f3      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d13c      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x178>
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x128>
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00f      	b.n	8002080 <HAL_RCC_ClockConfig+0x148>
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
 8002074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	63ba      	str	r2, [r7, #56]	; 0x38
 8002086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800208e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b2      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1a0>
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1bc>
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2202      	movs	r2, #2
 80020f6:	61ba      	str	r2, [r7, #24]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	617a      	str	r2, [r7, #20]
  return result;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e079      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fb6a 	bl	800080c <HAL_GetTick>
 8002138:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fb66 	bl	800080c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e061      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d214      	bcs.n	800219c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e040      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4912      	ldr	r1, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f000 f829 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	60fa      	str	r2, [r7, #12]
  return result;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	40d3      	lsrs	r3, r2
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x2ec>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x2f0>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_ClockConfig+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fab8 	bl	8000784 <HAL_InitTick>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3778      	adds	r7, #120	; 0x78
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	0800473c 	.word	0x0800473c
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e03f      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	e03f      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800226c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002270:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	607a      	str	r2, [r7, #4]
  return result;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a1d      	ldr	r2, [pc, #116]	; (80022fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	220f      	movs	r2, #15
 8002294:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	60fa      	str	r2, [r7, #12]
  return result;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	40d3      	lsrs	r3, r2
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e007      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	623b      	str	r3, [r7, #32]
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022e2:	623b      	str	r3, [r7, #32]
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	372c      	adds	r7, #44	; 0x2c
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40021000 	.word	0x40021000
 80022f8:	007a1200 	.word	0x007a1200
 80022fc:	08004754 	.word	0x08004754
 8002300:	08004764 	.word	0x08004764

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002322:	f7ff ffef 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002326:	4601      	mov	r1, r0
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002330:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002334:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	fa92 f2a2 	rbit	r2, r2
 800233c:	603a      	str	r2, [r7, #0]
  return result;
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	40d3      	lsrs	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x40>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000
 800235c:	0800474c 	.word	0x0800474c

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002366:	f7ff ffcd 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002374:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002378:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	603a      	str	r2, [r7, #0]
  return result;
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	40d3      	lsrs	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800238e:	5cd3      	ldrb	r3, [r2, r3]
 8002390:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	0800474c 	.word	0x0800474c

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b092      	sub	sp, #72	; 0x48
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80d4 	beq.w	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c8:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d4:	4b4b      	ldr	r3, [pc, #300]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023de:	61d3      	str	r3, [r2, #28]
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b45      	ldr	r3, [pc, #276]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d118      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a41      	ldr	r2, [pc, #260]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240a:	f7fe f9ff 	bl	800080c <HAL_GetTick>
 800240e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	e008      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe f9fb 	bl	800080c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b64      	cmp	r3, #100	; 0x64
 800241e:	d901      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1d6      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8084 	beq.w	800254a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800244c:	429a      	cmp	r2, r3
 800244e:	d07c      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002450:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	461a      	mov	r2, r3
 800247a:	2301      	movs	r3, #1
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	2300      	movs	r3, #0
 80024a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024a2:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d04b      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe f9ab 	bl	800080c <HAL_GetTick>
 80024b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe f9a7 	bl	800080c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e180      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024d0:	2302      	movs	r3, #2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	61fb      	str	r3, [r7, #28]
  return result;
 80024e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d108      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024fe:	4b01      	ldr	r3, [pc, #4]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	e00d      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	10908100 	.word	0x10908100
 8002510:	2302      	movs	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	4b9a      	ldr	r3, [pc, #616]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	2202      	movs	r2, #2
 8002522:	613a      	str	r2, [r7, #16]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	60fa      	str	r2, [r7, #12]
  return result;
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	fab2 f282 	clz	r2, r2
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	f002 021f 	and.w	r2, r2, #31
 800253e:	2101      	movs	r1, #1
 8002540:	fa01 f202 	lsl.w	r2, r1, r2
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0b7      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800254a:	4b8f      	ldr	r3, [pc, #572]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	498c      	ldr	r1, [pc, #560]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800255c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002564:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	4a87      	ldr	r2, [pc, #540]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f023 0203 	bic.w	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	497f      	ldr	r1, [pc, #508]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259a:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	4978      	ldr	r1, [pc, #480]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b8:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4970      	ldr	r1, [pc, #448]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025d6:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f023 0210 	bic.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4969      	ldr	r1, [pc, #420]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025f4:	4b64      	ldr	r3, [pc, #400]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	4961      	ldr	r1, [pc, #388]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f023 0220 	bic.w	r2, r3, #32
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	495a      	ldr	r1, [pc, #360]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002630:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	4952      	ldr	r1, [pc, #328]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264e:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	494b      	ldr	r1, [pc, #300]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	4943      	ldr	r1, [pc, #268]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	493c      	ldr	r1, [pc, #240]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	492d      	ldr	r1, [pc, #180]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	4925      	ldr	r1, [pc, #148]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	491e      	ldr	r1, [pc, #120]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	490f      	ldr	r1, [pc, #60]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d008      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00c      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	e002      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	4913      	ldr	r1, [pc, #76]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002790:	4313      	orrs	r3, r2
 8002792:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	490b      	ldr	r1, [pc, #44]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3748      	adds	r7, #72	; 0x48
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e040      	b.n	8002874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd fe2a 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2224      	movs	r2, #36	; 0x24
 800280c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0201 	bic.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fc0c 	bl	800303c <UART_SetConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e022      	b.n	8002874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fdd6 	bl	80033e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fe5d 	bl	800352c <UART_CheckIdleState>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af02      	add	r7, sp, #8
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 8082 	bne.w	800299a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_UART_Transmit+0x26>
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07a      	b.n	800299c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_UART_Transmit+0x38>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e073      	b.n	800299c <HAL_UART_Transmit+0x120>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2221      	movs	r2, #33	; 0x21
 80028c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ca:	f7fd ff9f 	bl	800080c <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d108      	bne.n	80028fc <HAL_UART_Transmit+0x80>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e003      	b.n	8002904 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800290c:	e02d      	b.n	800296a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fe50 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e039      	b.n	800299c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293a:	b292      	uxth	r2, r2
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	3302      	adds	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e008      	b.n	8002958 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	b292      	uxth	r2, r2
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1cb      	bne.n	800290e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fe1c 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e005      	b.n	800299c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d13d      	bne.n	8002a36 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <HAL_UART_Receive_IT+0x22>
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e036      	b.n	8002a38 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Receive_IT+0x34>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e02f      	b.n	8002a38 <HAL_UART_Receive_IT+0x94>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	613b      	str	r3, [r7, #16]
   return(result);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	69f9      	ldr	r1, [r7, #28]
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	e841 2300 	strex	r3, r2, [r1]
 8002a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e6      	bne.n	80029f4 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fe8b 	bl	8003748 <UART_Start_Receive_IT>
 8002a32:	4603      	mov	r3, r0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	; 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a6e:	4013      	ands	r3, r2
 8002a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d115      	bne.n	8002aa8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d009      	beq.n	8002aa8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 82a3 	beq.w	8002fe4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
      }
      return;
 8002aa6:	e29d      	b.n	8002fe4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8117 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ac2:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <HAL_UART_IRQHandler+0x298>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 810a 	beq.w	8002ce0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d011      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d011      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
 8002b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
 8002b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d017      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	f043 0208 	orr.w	r2, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	f043 0220 	orr.w	r2, r3, #32
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8209 	beq.w	8002fe8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d005      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04f      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fe3c 	bl	80038a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c32:	2b40      	cmp	r3, #64	; 0x40
 8002c34:	d141      	bne.n	8002cba <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c44:	e853 3f00 	ldrex	r3, [r3]
 8002c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3308      	adds	r3, #8
 8002c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1d9      	bne.n	8002c36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d013      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_UART_IRQHandler+0x29c>)
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd ff32 	bl	8000b00 <HAL_DMA_Abort_IT>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e00f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9ac 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	e00b      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9a8 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e007      	b.n	8002cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9a4 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002cd0:	e18a      	b.n	8002fe8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	bf00      	nop
    return;
 8002cd4:	e188      	b.n	8002fe8 <HAL_UART_IRQHandler+0x5a8>
 8002cd6:	bf00      	nop
 8002cd8:	04000120 	.word	0x04000120
 8002cdc:	08003967 	.word	0x08003967

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	f040 8143 	bne.w	8002f70 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 813c 	beq.w	8002f70 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8135 	beq.w	8002f70 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	f040 80b1 	bne.w	8002e80 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 815c 	beq.w	8002fec <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f080 8154 	bcs.w	8002fec <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	f000 8085 	beq.w	8002e64 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1da      	bne.n	8002d5a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3308      	adds	r3, #8
 8002daa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e1      	bne.n	8002da4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e3      	bne.n	8002de0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e34:	f023 0310 	bic.w	r3, r3, #16
 8002e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e4      	bne.n	8002e24 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fe15 	bl	8000a8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8d3 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e7e:	e0b5      	b.n	8002fec <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a7 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a2 	beq.w	8002ff0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e4      	bne.n	8002eac <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f06:	633a      	str	r2, [r7, #48]	; 0x30
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e3      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f023 0310 	bic.w	r3, r3, #16
 8002f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e4      	bne.n	8002f2c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f66:	4619      	mov	r1, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f85b 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f6e:	e03f      	b.n	8002ff0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <HAL_UART_IRQHandler+0x55a>
 8002f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fe83 	bl	8003c9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f98:	e02d      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01c      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
    }
    return;
 8002fc2:	e017      	b.n	8002ff4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00c      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fcd8 	bl	8003992 <UART_EndTransmit_IT>
    return;
 8002fe2:	e008      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002fe4:	bf00      	nop
 8002fe6:	e006      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002fe8:	bf00      	nop
 8002fea:	e004      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002fec:	bf00      	nop
 8002fee:	e002      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002ff0:	bf00      	nop
 8002ff2:	e000      	b.n	8002ff6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002ff4:	bf00      	nop
  }

}
 8002ff6:	37e8      	adds	r7, #232	; 0xe8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b92      	ldr	r3, [pc, #584]	; (80032b0 <UART_SetConfig+0x274>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	6979      	ldr	r1, [r7, #20]
 8003070:	430b      	orrs	r3, r1
 8003072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a80      	ldr	r2, [pc, #512]	; (80032b4 <UART_SetConfig+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d120      	bne.n	80030fa <UART_SetConfig+0xbe>
 80030b8:	4b7f      	ldr	r3, [pc, #508]	; (80032b8 <UART_SetConfig+0x27c>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d817      	bhi.n	80030f4 <UART_SetConfig+0xb8>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <UART_SetConfig+0x90>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030e9 	.word	0x080030e9
 80030d4:	080030ef 	.word	0x080030ef
 80030d8:	080030e3 	.word	0x080030e3
 80030dc:	2301      	movs	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e0b5      	b.n	800324e <UART_SetConfig+0x212>
 80030e2:	2302      	movs	r3, #2
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e0b2      	b.n	800324e <UART_SetConfig+0x212>
 80030e8:	2304      	movs	r3, #4
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e0af      	b.n	800324e <UART_SetConfig+0x212>
 80030ee:	2308      	movs	r3, #8
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e0ac      	b.n	800324e <UART_SetConfig+0x212>
 80030f4:	2310      	movs	r3, #16
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e0a9      	b.n	800324e <UART_SetConfig+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6f      	ldr	r2, [pc, #444]	; (80032bc <UART_SetConfig+0x280>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d124      	bne.n	800314e <UART_SetConfig+0x112>
 8003104:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <UART_SetConfig+0x27c>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003110:	d011      	beq.n	8003136 <UART_SetConfig+0xfa>
 8003112:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003116:	d817      	bhi.n	8003148 <UART_SetConfig+0x10c>
 8003118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800311c:	d011      	beq.n	8003142 <UART_SetConfig+0x106>
 800311e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003122:	d811      	bhi.n	8003148 <UART_SetConfig+0x10c>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <UART_SetConfig+0xf4>
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d006      	beq.n	800313c <UART_SetConfig+0x100>
 800312e:	e00b      	b.n	8003148 <UART_SetConfig+0x10c>
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e08b      	b.n	800324e <UART_SetConfig+0x212>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e088      	b.n	800324e <UART_SetConfig+0x212>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e085      	b.n	800324e <UART_SetConfig+0x212>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e082      	b.n	800324e <UART_SetConfig+0x212>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e07f      	b.n	800324e <UART_SetConfig+0x212>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5b      	ldr	r2, [pc, #364]	; (80032c0 <UART_SetConfig+0x284>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d124      	bne.n	80031a2 <UART_SetConfig+0x166>
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <UART_SetConfig+0x27c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003160:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003164:	d011      	beq.n	800318a <UART_SetConfig+0x14e>
 8003166:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800316a:	d817      	bhi.n	800319c <UART_SetConfig+0x160>
 800316c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003170:	d011      	beq.n	8003196 <UART_SetConfig+0x15a>
 8003172:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003176:	d811      	bhi.n	800319c <UART_SetConfig+0x160>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x148>
 800317c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x154>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x160>
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e061      	b.n	800324e <UART_SetConfig+0x212>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e05e      	b.n	800324e <UART_SetConfig+0x212>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e05b      	b.n	800324e <UART_SetConfig+0x212>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e058      	b.n	800324e <UART_SetConfig+0x212>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e055      	b.n	800324e <UART_SetConfig+0x212>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a47      	ldr	r2, [pc, #284]	; (80032c4 <UART_SetConfig+0x288>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d124      	bne.n	80031f6 <UART_SetConfig+0x1ba>
 80031ac:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <UART_SetConfig+0x27c>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80031b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031b8:	d011      	beq.n	80031de <UART_SetConfig+0x1a2>
 80031ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031be:	d817      	bhi.n	80031f0 <UART_SetConfig+0x1b4>
 80031c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c4:	d011      	beq.n	80031ea <UART_SetConfig+0x1ae>
 80031c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ca:	d811      	bhi.n	80031f0 <UART_SetConfig+0x1b4>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <UART_SetConfig+0x19c>
 80031d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d4:	d006      	beq.n	80031e4 <UART_SetConfig+0x1a8>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x1b4>
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e037      	b.n	800324e <UART_SetConfig+0x212>
 80031de:	2302      	movs	r3, #2
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e034      	b.n	800324e <UART_SetConfig+0x212>
 80031e4:	2304      	movs	r3, #4
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e031      	b.n	800324e <UART_SetConfig+0x212>
 80031ea:	2308      	movs	r3, #8
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e02e      	b.n	800324e <UART_SetConfig+0x212>
 80031f0:	2310      	movs	r3, #16
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e02b      	b.n	800324e <UART_SetConfig+0x212>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <UART_SetConfig+0x28c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d124      	bne.n	800324a <UART_SetConfig+0x20e>
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <UART_SetConfig+0x27c>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003208:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320c:	d011      	beq.n	8003232 <UART_SetConfig+0x1f6>
 800320e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003212:	d817      	bhi.n	8003244 <UART_SetConfig+0x208>
 8003214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003218:	d011      	beq.n	800323e <UART_SetConfig+0x202>
 800321a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321e:	d811      	bhi.n	8003244 <UART_SetConfig+0x208>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x1f0>
 8003224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003228:	d006      	beq.n	8003238 <UART_SetConfig+0x1fc>
 800322a:	e00b      	b.n	8003244 <UART_SetConfig+0x208>
 800322c:	2300      	movs	r3, #0
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e00d      	b.n	800324e <UART_SetConfig+0x212>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e00a      	b.n	800324e <UART_SetConfig+0x212>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e007      	b.n	800324e <UART_SetConfig+0x212>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e004      	b.n	800324e <UART_SetConfig+0x212>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e001      	b.n	800324e <UART_SetConfig+0x212>
 800324a:	2310      	movs	r3, #16
 800324c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003256:	d16c      	bne.n	8003332 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003258:	7ffb      	ldrb	r3, [r7, #31]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d838      	bhi.n	80032d0 <UART_SetConfig+0x294>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <UART_SetConfig+0x228>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003289 	.word	0x08003289
 8003268:	08003291 	.word	0x08003291
 800326c:	08003299 	.word	0x08003299
 8003270:	080032d1 	.word	0x080032d1
 8003274:	0800329f 	.word	0x0800329f
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032d1 	.word	0x080032d1
 8003280:	080032d1 	.word	0x080032d1
 8003284:	080032a7 	.word	0x080032a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff f848 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 800328c:	61b8      	str	r0, [r7, #24]
        break;
 800328e:	e024      	b.n	80032da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f866 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8003294:	61b8      	str	r0, [r7, #24]
        break;
 8003296:	e020      	b.n	80032da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x290>)
 800329a:	61bb      	str	r3, [r7, #24]
        break;
 800329c:	e01d      	b.n	80032da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329e:	f7fe ffc7 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80032a2:	61b8      	str	r0, [r7, #24]
        break;
 80032a4:	e019      	b.n	80032da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032aa:	61bb      	str	r3, [r7, #24]
        break;
 80032ac:	e015      	b.n	80032da <UART_SetConfig+0x29e>
 80032ae:	bf00      	nop
 80032b0:	efff69f3 	.word	0xefff69f3
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40004400 	.word	0x40004400
 80032c0:	40004800 	.word	0x40004800
 80032c4:	40004c00 	.word	0x40004c00
 80032c8:	40005000 	.word	0x40005000
 80032cc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	77bb      	strb	r3, [r7, #30]
        break;
 80032d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d075      	beq.n	80033cc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	005a      	lsls	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x2f0>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	89fb      	ldrh	r3, [r7, #14]
 800331e:	4313      	orrs	r3, r2
 8003320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	89fa      	ldrh	r2, [r7, #14]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e04f      	b.n	80033cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
 8003330:	e04c      	b.n	80033cc <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x34e>
 8003338:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x304>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe ffda 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e013      	b.n	8003394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fff8 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8003370:	61b8      	str	r0, [r7, #24]
        break;
 8003372:	e00f      	b.n	8003394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <UART_SetConfig+0x3a8>)
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e00c      	b.n	8003394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe ff59 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 800337e:	61b8      	str	r0, [r7, #24]
        break;
 8003380:	e008      	b.n	8003394 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003386:	61bb      	str	r3, [r7, #24]
        break;
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	77bb      	strb	r3, [r7, #30]
        break;
 8003392:	bf00      	nop
    }

    if (pclk != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	085a      	lsrs	r2, r3, #1
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	441a      	add	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b0f      	cmp	r3, #15
 80033b4:	d908      	bls.n	80033c8 <UART_SetConfig+0x38c>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d204      	bcs.n	80033c8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e001      	b.n	80033cc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01a      	beq.n	80034fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e6:	d10a      	bne.n	80034fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800353c:	f7fd f966 	bl	800080c <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10e      	bne.n	800356e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f82d 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e023      	b.n	80035b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d10e      	bne.n	800359a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f817 	bl	80035be <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00d      	b.n	80035b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b09c      	sub	sp, #112	; 0x70
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ce:	e0a5      	b.n	800371c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	f000 80a1 	beq.w	800371c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035da:	f7fd f917 	bl	800080c <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80035ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d13e      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003604:	667b      	str	r3, [r7, #100]	; 0x64
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800360e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003610:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e6      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	663b      	str	r3, [r7, #96]	; 0x60
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3308      	adds	r3, #8
 8003640:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003642:	64ba      	str	r2, [r7, #72]	; 0x48
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e5      	bne.n	8003622 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e067      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d04f      	beq.n	800371c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368a:	d147      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003694:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
 80036b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e6      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	613b      	str	r3, [r7, #16]
   return(result);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3308      	adds	r3, #8
 80036e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036e8:	623a      	str	r2, [r7, #32]
 80036ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e5      	bne.n	80036c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e010      	b.n	800373e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	429a      	cmp	r2, r3
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	f43f af4a 	beq.w	80035d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3770      	adds	r7, #112	; 0x70
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003748:	b480      	push	{r7}
 800374a:	b091      	sub	sp, #68	; 0x44
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d10e      	bne.n	800379a <UART_Start_Receive_IT+0x52>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d105      	bne.n	8003790 <UART_Start_Receive_IT+0x48>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f240 12ff 	movw	r2, #511	; 0x1ff
 800378a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800378e:	e02d      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003798:	e028      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <UART_Start_Receive_IT+0x76>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <UART_Start_Receive_IT+0x6c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b2:	e01b      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	227f      	movs	r2, #127	; 0x7f
 80037b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037bc:	e016      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c6:	d10d      	bne.n	80037e4 <UART_Start_Receive_IT+0x9c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <UART_Start_Receive_IT+0x92>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	227f      	movs	r2, #127	; 0x7f
 80037d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d8:	e008      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	223f      	movs	r2, #63	; 0x3f
 80037de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037e2:	e003      	b.n	80037ec <UART_Start_Receive_IT+0xa4>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2222      	movs	r2, #34	; 0x22
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3308      	adds	r3, #8
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800381a:	637a      	str	r2, [r7, #52]	; 0x34
 800381c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	d107      	bne.n	8003848 <UART_Start_Receive_IT+0x100>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <UART_Start_Receive_IT+0x150>)
 8003844:	665a      	str	r2, [r3, #100]	; 0x64
 8003846:	e002      	b.n	800384e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a14      	ldr	r2, [pc, #80]	; (800389c <UART_Start_Receive_IT+0x154>)
 800384c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	613b      	str	r3, [r7, #16]
   return(result);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	69f9      	ldr	r1, [r7, #28]
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	61bb      	str	r3, [r7, #24]
   return(result);
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e6      	bne.n	8003856 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3744      	adds	r7, #68	; 0x44
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	08003b43 	.word	0x08003b43
 800389c:	080039e7 	.word	0x080039e7

080038a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b095      	sub	sp, #84	; 0x54
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c6:	643b      	str	r3, [r7, #64]	; 0x40
 80038c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e6      	bne.n	80038a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	2b01      	cmp	r3, #1
 8003914:	d118      	bne.n	8003948 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	e853 3f00 	ldrex	r3, [r3]
 8003922:	60bb      	str	r3, [r7, #8]
   return(result);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0310 	bic.w	r3, r3, #16
 800392a:	647b      	str	r3, [r7, #68]	; 0x44
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	e841 2300 	strex	r3, r2, [r1]
 8003940:	613b      	str	r3, [r7, #16]
   return(result);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1e6      	bne.n	8003916 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	665a      	str	r2, [r3, #100]	; 0x64
}
 800395a:	bf00      	nop
 800395c:	3754      	adds	r7, #84	; 0x54
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fb43 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398a:	bf00      	nop
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b088      	sub	sp, #32
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6979      	ldr	r1, [r7, #20]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	613b      	str	r3, [r7, #16]
   return(result);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fb0f 	bl	8002ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b096      	sub	sp, #88	; 0x58
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fc:	2b22      	cmp	r3, #34	; 0x22
 80039fe:	f040 8094 	bne.w	8003b2a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a10:	b2d9      	uxtb	r1, r3
 8003a12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d177      	bne.n	8003b3a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e6      	bne.n	8003a4a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e5      	bne.n	8003a7c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d12e      	bne.n	8003b22 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d103      	bne.n	8003b12 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fa82 	bl	8003024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b20:	e00b      	b.n	8003b3a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fc50 	bl	80003c8 <HAL_UART_RxCpltCallback>
}
 8003b28:	e007      	b.n	8003b3a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	619a      	str	r2, [r3, #24]
}
 8003b3a:	bf00      	nop
 8003b3c:	3758      	adds	r7, #88	; 0x58
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b096      	sub	sp, #88	; 0x58
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b50:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	f040 8094 	bne.w	8003c86 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b64:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b6e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b76:	4013      	ands	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d177      	bne.n	8003c96 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e6      	bne.n	8003ba6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d12e      	bne.n	8003c7e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b10      	cmp	r3, #16
 8003c64:	d103      	bne.n	8003c6e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff f9d4 	bl	8003024 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c7c:	e00b      	b.n	8003c96 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fc fba2 	bl	80003c8 <HAL_UART_RxCpltCallback>
}
 8003c84:	e007      	b.n	8003c96 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0208 	orr.w	r2, r2, #8
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	3758      	adds	r7, #88	; 0x58
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <__errno>:
 8003cb4:	4b01      	ldr	r3, [pc, #4]	; (8003cbc <__errno+0x8>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c

08003cc0 <__libc_init_array>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4d0d      	ldr	r5, [pc, #52]	; (8003cf8 <__libc_init_array+0x38>)
 8003cc4:	4c0d      	ldr	r4, [pc, #52]	; (8003cfc <__libc_init_array+0x3c>)
 8003cc6:	1b64      	subs	r4, r4, r5
 8003cc8:	10a4      	asrs	r4, r4, #2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	42a6      	cmp	r6, r4
 8003cce:	d109      	bne.n	8003ce4 <__libc_init_array+0x24>
 8003cd0:	4d0b      	ldr	r5, [pc, #44]	; (8003d00 <__libc_init_array+0x40>)
 8003cd2:	4c0c      	ldr	r4, [pc, #48]	; (8003d04 <__libc_init_array+0x44>)
 8003cd4:	f000 fd1e 	bl	8004714 <_init>
 8003cd8:	1b64      	subs	r4, r4, r5
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	2600      	movs	r6, #0
 8003cde:	42a6      	cmp	r6, r4
 8003ce0:	d105      	bne.n	8003cee <__libc_init_array+0x2e>
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce8:	4798      	blx	r3
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7ee      	b.n	8003ccc <__libc_init_array+0xc>
 8003cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf2:	4798      	blx	r3
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	e7f2      	b.n	8003cde <__libc_init_array+0x1e>
 8003cf8:	080047d8 	.word	0x080047d8
 8003cfc:	080047d8 	.word	0x080047d8
 8003d00:	080047d8 	.word	0x080047d8
 8003d04:	080047dc 	.word	0x080047dc

08003d08 <memset>:
 8003d08:	4402      	add	r2, r0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <_puts_r>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	460e      	mov	r6, r1
 8003d1c:	4605      	mov	r5, r0
 8003d1e:	b118      	cbz	r0, 8003d28 <_puts_r+0x10>
 8003d20:	6983      	ldr	r3, [r0, #24]
 8003d22:	b90b      	cbnz	r3, 8003d28 <_puts_r+0x10>
 8003d24:	f000 fa48 	bl	80041b8 <__sinit>
 8003d28:	69ab      	ldr	r3, [r5, #24]
 8003d2a:	68ac      	ldr	r4, [r5, #8]
 8003d2c:	b913      	cbnz	r3, 8003d34 <_puts_r+0x1c>
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 fa42 	bl	80041b8 <__sinit>
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <_puts_r+0xd0>)
 8003d36:	429c      	cmp	r4, r3
 8003d38:	d120      	bne.n	8003d7c <_puts_r+0x64>
 8003d3a:	686c      	ldr	r4, [r5, #4]
 8003d3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d3e:	07db      	lsls	r3, r3, #31
 8003d40:	d405      	bmi.n	8003d4e <_puts_r+0x36>
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	0598      	lsls	r0, r3, #22
 8003d46:	d402      	bmi.n	8003d4e <_puts_r+0x36>
 8003d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d4a:	f000 fad3 	bl	80042f4 <__retarget_lock_acquire_recursive>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	0719      	lsls	r1, r3, #28
 8003d52:	d51d      	bpl.n	8003d90 <_puts_r+0x78>
 8003d54:	6923      	ldr	r3, [r4, #16]
 8003d56:	b1db      	cbz	r3, 8003d90 <_puts_r+0x78>
 8003d58:	3e01      	subs	r6, #1
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d60:	3b01      	subs	r3, #1
 8003d62:	60a3      	str	r3, [r4, #8]
 8003d64:	bb39      	cbnz	r1, 8003db6 <_puts_r+0x9e>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	da38      	bge.n	8003ddc <_puts_r+0xc4>
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	210a      	movs	r1, #10
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 f848 	bl	8003e04 <__swbuf_r>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d011      	beq.n	8003d9c <_puts_r+0x84>
 8003d78:	250a      	movs	r5, #10
 8003d7a:	e011      	b.n	8003da0 <_puts_r+0x88>
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <_puts_r+0xd4>)
 8003d7e:	429c      	cmp	r4, r3
 8003d80:	d101      	bne.n	8003d86 <_puts_r+0x6e>
 8003d82:	68ac      	ldr	r4, [r5, #8]
 8003d84:	e7da      	b.n	8003d3c <_puts_r+0x24>
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <_puts_r+0xd8>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	bf08      	it	eq
 8003d8c:	68ec      	ldreq	r4, [r5, #12]
 8003d8e:	e7d5      	b.n	8003d3c <_puts_r+0x24>
 8003d90:	4621      	mov	r1, r4
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 f888 	bl	8003ea8 <__swsetup_r>
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d0dd      	beq.n	8003d58 <_puts_r+0x40>
 8003d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003da2:	07da      	lsls	r2, r3, #31
 8003da4:	d405      	bmi.n	8003db2 <_puts_r+0x9a>
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	059b      	lsls	r3, r3, #22
 8003daa:	d402      	bmi.n	8003db2 <_puts_r+0x9a>
 8003dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dae:	f000 faa2 	bl	80042f6 <__retarget_lock_release_recursive>
 8003db2:	4628      	mov	r0, r5
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da04      	bge.n	8003dc4 <_puts_r+0xac>
 8003dba:	69a2      	ldr	r2, [r4, #24]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	dc06      	bgt.n	8003dce <_puts_r+0xb6>
 8003dc0:	290a      	cmp	r1, #10
 8003dc2:	d004      	beq.n	8003dce <_puts_r+0xb6>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	6022      	str	r2, [r4, #0]
 8003dca:	7019      	strb	r1, [r3, #0]
 8003dcc:	e7c5      	b.n	8003d5a <_puts_r+0x42>
 8003dce:	4622      	mov	r2, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 f817 	bl	8003e04 <__swbuf_r>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d1bf      	bne.n	8003d5a <_puts_r+0x42>
 8003dda:	e7df      	b.n	8003d9c <_puts_r+0x84>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	250a      	movs	r5, #10
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	6022      	str	r2, [r4, #0]
 8003de4:	701d      	strb	r5, [r3, #0]
 8003de6:	e7db      	b.n	8003da0 <_puts_r+0x88>
 8003de8:	08004798 	.word	0x08004798
 8003dec:	080047b8 	.word	0x080047b8
 8003df0:	08004778 	.word	0x08004778

08003df4 <puts>:
 8003df4:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <puts+0xc>)
 8003df6:	4601      	mov	r1, r0
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	f7ff bf8d 	b.w	8003d18 <_puts_r>
 8003dfe:	bf00      	nop
 8003e00:	2000000c 	.word	0x2000000c

08003e04 <__swbuf_r>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	460e      	mov	r6, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b118      	cbz	r0, 8003e16 <__swbuf_r+0x12>
 8003e0e:	6983      	ldr	r3, [r0, #24]
 8003e10:	b90b      	cbnz	r3, 8003e16 <__swbuf_r+0x12>
 8003e12:	f000 f9d1 	bl	80041b8 <__sinit>
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <__swbuf_r+0x98>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d12b      	bne.n	8003e74 <__swbuf_r+0x70>
 8003e1c:	686c      	ldr	r4, [r5, #4]
 8003e1e:	69a3      	ldr	r3, [r4, #24]
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	071a      	lsls	r2, r3, #28
 8003e26:	d52f      	bpl.n	8003e88 <__swbuf_r+0x84>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	b36b      	cbz	r3, 8003e88 <__swbuf_r+0x84>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	1ac0      	subs	r0, r0, r3
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	b2f6      	uxtb	r6, r6
 8003e36:	4283      	cmp	r3, r0
 8003e38:	4637      	mov	r7, r6
 8003e3a:	dc04      	bgt.n	8003e46 <__swbuf_r+0x42>
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f926 	bl	8004090 <_fflush_r>
 8003e44:	bb30      	cbnz	r0, 8003e94 <__swbuf_r+0x90>
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	701e      	strb	r6, [r3, #0]
 8003e54:	6963      	ldr	r3, [r4, #20]
 8003e56:	3001      	adds	r0, #1
 8003e58:	4283      	cmp	r3, r0
 8003e5a:	d004      	beq.n	8003e66 <__swbuf_r+0x62>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	07db      	lsls	r3, r3, #31
 8003e60:	d506      	bpl.n	8003e70 <__swbuf_r+0x6c>
 8003e62:	2e0a      	cmp	r6, #10
 8003e64:	d104      	bne.n	8003e70 <__swbuf_r+0x6c>
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f911 	bl	8004090 <_fflush_r>
 8003e6e:	b988      	cbnz	r0, 8003e94 <__swbuf_r+0x90>
 8003e70:	4638      	mov	r0, r7
 8003e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <__swbuf_r+0x9c>)
 8003e76:	429c      	cmp	r4, r3
 8003e78:	d101      	bne.n	8003e7e <__swbuf_r+0x7a>
 8003e7a:	68ac      	ldr	r4, [r5, #8]
 8003e7c:	e7cf      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <__swbuf_r+0xa0>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	bf08      	it	eq
 8003e84:	68ec      	ldreq	r4, [r5, #12]
 8003e86:	e7ca      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f80c 	bl	8003ea8 <__swsetup_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0cb      	beq.n	8003e2c <__swbuf_r+0x28>
 8003e94:	f04f 37ff 	mov.w	r7, #4294967295
 8003e98:	e7ea      	b.n	8003e70 <__swbuf_r+0x6c>
 8003e9a:	bf00      	nop
 8003e9c:	08004798 	.word	0x08004798
 8003ea0:	080047b8 	.word	0x080047b8
 8003ea4:	08004778 	.word	0x08004778

08003ea8 <__swsetup_r>:
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <__swsetup_r+0xcc>)
 8003eaa:	b570      	push	{r4, r5, r6, lr}
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	b125      	cbz	r5, 8003ebe <__swsetup_r+0x16>
 8003eb4:	69ab      	ldr	r3, [r5, #24]
 8003eb6:	b913      	cbnz	r3, 8003ebe <__swsetup_r+0x16>
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f97d 	bl	80041b8 <__sinit>
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <__swsetup_r+0xd0>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d10f      	bne.n	8003ee4 <__swsetup_r+0x3c>
 8003ec4:	686c      	ldr	r4, [r5, #4]
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ecc:	0719      	lsls	r1, r3, #28
 8003ece:	d42c      	bmi.n	8003f2a <__swsetup_r+0x82>
 8003ed0:	06dd      	lsls	r5, r3, #27
 8003ed2:	d411      	bmi.n	8003ef8 <__swsetup_r+0x50>
 8003ed4:	2309      	movs	r3, #9
 8003ed6:	6033      	str	r3, [r6, #0]
 8003ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee2:	e03e      	b.n	8003f62 <__swsetup_r+0xba>
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <__swsetup_r+0xd4>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <__swsetup_r+0x46>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7eb      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <__swsetup_r+0xd8>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7e6      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003ef8:	0758      	lsls	r0, r3, #29
 8003efa:	d512      	bpl.n	8003f22 <__swsetup_r+0x7a>
 8003efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efe:	b141      	cbz	r1, 8003f12 <__swsetup_r+0x6a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__swsetup_r+0x66>
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 fa5b 	bl	80043c4 <_free_r>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6363      	str	r3, [r4, #52]	; 0x34
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	b94b      	cbnz	r3, 8003f42 <__swsetup_r+0x9a>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d003      	beq.n	8003f42 <__swsetup_r+0x9a>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 fa01 	bl	8004344 <__smakebuf_r>
 8003f42:	89a0      	ldrh	r0, [r4, #12]
 8003f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f48:	f010 0301 	ands.w	r3, r0, #1
 8003f4c:	d00a      	beq.n	8003f64 <__swsetup_r+0xbc>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6963      	ldr	r3, [r4, #20]
 8003f54:	425b      	negs	r3, r3
 8003f56:	61a3      	str	r3, [r4, #24]
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	b943      	cbnz	r3, 8003f6e <__swsetup_r+0xc6>
 8003f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f60:	d1ba      	bne.n	8003ed8 <__swsetup_r+0x30>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	0781      	lsls	r1, r0, #30
 8003f66:	bf58      	it	pl
 8003f68:	6963      	ldrpl	r3, [r4, #20]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	e7f4      	b.n	8003f58 <__swsetup_r+0xb0>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e7f7      	b.n	8003f62 <__swsetup_r+0xba>
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	08004798 	.word	0x08004798
 8003f7c:	080047b8 	.word	0x080047b8
 8003f80:	08004778 	.word	0x08004778

08003f84 <__sflush_r>:
 8003f84:	898a      	ldrh	r2, [r1, #12]
 8003f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	0710      	lsls	r0, r2, #28
 8003f8e:	460c      	mov	r4, r1
 8003f90:	d458      	bmi.n	8004044 <__sflush_r+0xc0>
 8003f92:	684b      	ldr	r3, [r1, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc05      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dc02      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d0f9      	beq.n	8003f9e <__sflush_r+0x1a>
 8003faa:	2300      	movs	r3, #0
 8003fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fb0:	682f      	ldr	r7, [r5, #0]
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	d032      	beq.n	800401c <__sflush_r+0x98>
 8003fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	075a      	lsls	r2, r3, #29
 8003fbc:	d505      	bpl.n	8003fca <__sflush_r+0x46>
 8003fbe:	6863      	ldr	r3, [r4, #4]
 8003fc0:	1ac0      	subs	r0, r0, r3
 8003fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc4:	b10b      	cbz	r3, 8003fca <__sflush_r+0x46>
 8003fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc8:	1ac0      	subs	r0, r0, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fd0:	6a21      	ldr	r1, [r4, #32]
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	47b0      	blx	r6
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	d106      	bne.n	8003fea <__sflush_r+0x66>
 8003fdc:	6829      	ldr	r1, [r5, #0]
 8003fde:	291d      	cmp	r1, #29
 8003fe0:	d82c      	bhi.n	800403c <__sflush_r+0xb8>
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	; (800408c <__sflush_r+0x108>)
 8003fe4:	40ca      	lsrs	r2, r1
 8003fe6:	07d6      	lsls	r6, r2, #31
 8003fe8:	d528      	bpl.n	800403c <__sflush_r+0xb8>
 8003fea:	2200      	movs	r2, #0
 8003fec:	6062      	str	r2, [r4, #4]
 8003fee:	04d9      	lsls	r1, r3, #19
 8003ff0:	6922      	ldr	r2, [r4, #16]
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	d504      	bpl.n	8004000 <__sflush_r+0x7c>
 8003ff6:	1c42      	adds	r2, r0, #1
 8003ff8:	d101      	bne.n	8003ffe <__sflush_r+0x7a>
 8003ffa:	682b      	ldr	r3, [r5, #0]
 8003ffc:	b903      	cbnz	r3, 8004000 <__sflush_r+0x7c>
 8003ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8004000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004002:	602f      	str	r7, [r5, #0]
 8004004:	2900      	cmp	r1, #0
 8004006:	d0ca      	beq.n	8003f9e <__sflush_r+0x1a>
 8004008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400c:	4299      	cmp	r1, r3
 800400e:	d002      	beq.n	8004016 <__sflush_r+0x92>
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f9d7 	bl	80043c4 <_free_r>
 8004016:	2000      	movs	r0, #0
 8004018:	6360      	str	r0, [r4, #52]	; 0x34
 800401a:	e7c1      	b.n	8003fa0 <__sflush_r+0x1c>
 800401c:	6a21      	ldr	r1, [r4, #32]
 800401e:	2301      	movs	r3, #1
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	1c41      	adds	r1, r0, #1
 8004026:	d1c7      	bne.n	8003fb8 <__sflush_r+0x34>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0c4      	beq.n	8003fb8 <__sflush_r+0x34>
 800402e:	2b1d      	cmp	r3, #29
 8004030:	d001      	beq.n	8004036 <__sflush_r+0xb2>
 8004032:	2b16      	cmp	r3, #22
 8004034:	d101      	bne.n	800403a <__sflush_r+0xb6>
 8004036:	602f      	str	r7, [r5, #0]
 8004038:	e7b1      	b.n	8003f9e <__sflush_r+0x1a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	e7ad      	b.n	8003fa0 <__sflush_r+0x1c>
 8004044:	690f      	ldr	r7, [r1, #16]
 8004046:	2f00      	cmp	r7, #0
 8004048:	d0a9      	beq.n	8003f9e <__sflush_r+0x1a>
 800404a:	0793      	lsls	r3, r2, #30
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	bf08      	it	eq
 8004050:	694b      	ldreq	r3, [r1, #20]
 8004052:	600f      	str	r7, [r1, #0]
 8004054:	bf18      	it	ne
 8004056:	2300      	movne	r3, #0
 8004058:	eba6 0807 	sub.w	r8, r6, r7
 800405c:	608b      	str	r3, [r1, #8]
 800405e:	f1b8 0f00 	cmp.w	r8, #0
 8004062:	dd9c      	ble.n	8003f9e <__sflush_r+0x1a>
 8004064:	6a21      	ldr	r1, [r4, #32]
 8004066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004068:	4643      	mov	r3, r8
 800406a:	463a      	mov	r2, r7
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	2800      	cmp	r0, #0
 8004072:	dc06      	bgt.n	8004082 <__sflush_r+0xfe>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	e78e      	b.n	8003fa0 <__sflush_r+0x1c>
 8004082:	4407      	add	r7, r0
 8004084:	eba8 0800 	sub.w	r8, r8, r0
 8004088:	e7e9      	b.n	800405e <__sflush_r+0xda>
 800408a:	bf00      	nop
 800408c:	20400001 	.word	0x20400001

08004090 <_fflush_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b913      	cbnz	r3, 80040a0 <_fflush_r+0x10>
 800409a:	2500      	movs	r5, #0
 800409c:	4628      	mov	r0, r5
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	b118      	cbz	r0, 80040aa <_fflush_r+0x1a>
 80040a2:	6983      	ldr	r3, [r0, #24]
 80040a4:	b90b      	cbnz	r3, 80040aa <_fflush_r+0x1a>
 80040a6:	f000 f887 	bl	80041b8 <__sinit>
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <_fflush_r+0x6c>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	d11b      	bne.n	80040e8 <_fflush_r+0x58>
 80040b0:	686c      	ldr	r4, [r5, #4]
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ef      	beq.n	800409a <_fflush_r+0xa>
 80040ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040bc:	07d0      	lsls	r0, r2, #31
 80040be:	d404      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c0:	0599      	lsls	r1, r3, #22
 80040c2:	d402      	bmi.n	80040ca <_fflush_r+0x3a>
 80040c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c6:	f000 f915 	bl	80042f4 <__retarget_lock_acquire_recursive>
 80040ca:	4628      	mov	r0, r5
 80040cc:	4621      	mov	r1, r4
 80040ce:	f7ff ff59 	bl	8003f84 <__sflush_r>
 80040d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040d4:	07da      	lsls	r2, r3, #31
 80040d6:	4605      	mov	r5, r0
 80040d8:	d4e0      	bmi.n	800409c <_fflush_r+0xc>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	059b      	lsls	r3, r3, #22
 80040de:	d4dd      	bmi.n	800409c <_fflush_r+0xc>
 80040e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040e2:	f000 f908 	bl	80042f6 <__retarget_lock_release_recursive>
 80040e6:	e7d9      	b.n	800409c <_fflush_r+0xc>
 80040e8:	4b05      	ldr	r3, [pc, #20]	; (8004100 <_fflush_r+0x70>)
 80040ea:	429c      	cmp	r4, r3
 80040ec:	d101      	bne.n	80040f2 <_fflush_r+0x62>
 80040ee:	68ac      	ldr	r4, [r5, #8]
 80040f0:	e7df      	b.n	80040b2 <_fflush_r+0x22>
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <_fflush_r+0x74>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	bf08      	it	eq
 80040f8:	68ec      	ldreq	r4, [r5, #12]
 80040fa:	e7da      	b.n	80040b2 <_fflush_r+0x22>
 80040fc:	08004798 	.word	0x08004798
 8004100:	080047b8 	.word	0x080047b8
 8004104:	08004778 	.word	0x08004778

08004108 <std>:
 8004108:	2300      	movs	r3, #0
 800410a:	b510      	push	{r4, lr}
 800410c:	4604      	mov	r4, r0
 800410e:	e9c0 3300 	strd	r3, r3, [r0]
 8004112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004116:	6083      	str	r3, [r0, #8]
 8004118:	8181      	strh	r1, [r0, #12]
 800411a:	6643      	str	r3, [r0, #100]	; 0x64
 800411c:	81c2      	strh	r2, [r0, #14]
 800411e:	6183      	str	r3, [r0, #24]
 8004120:	4619      	mov	r1, r3
 8004122:	2208      	movs	r2, #8
 8004124:	305c      	adds	r0, #92	; 0x5c
 8004126:	f7ff fdef 	bl	8003d08 <memset>
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <std+0x38>)
 800412c:	6263      	str	r3, [r4, #36]	; 0x24
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <std+0x3c>)
 8004130:	62a3      	str	r3, [r4, #40]	; 0x28
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <std+0x40>)
 8004134:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <std+0x44>)
 8004138:	6224      	str	r4, [r4, #32]
 800413a:	6323      	str	r3, [r4, #48]	; 0x30
 800413c:	bd10      	pop	{r4, pc}
 800413e:	bf00      	nop
 8004140:	080045a5 	.word	0x080045a5
 8004144:	080045c7 	.word	0x080045c7
 8004148:	080045ff 	.word	0x080045ff
 800414c:	08004623 	.word	0x08004623

08004150 <_cleanup_r>:
 8004150:	4901      	ldr	r1, [pc, #4]	; (8004158 <_cleanup_r+0x8>)
 8004152:	f000 b8af 	b.w	80042b4 <_fwalk_reent>
 8004156:	bf00      	nop
 8004158:	08004091 	.word	0x08004091

0800415c <__sfmoreglue>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	2268      	movs	r2, #104	; 0x68
 8004160:	1e4d      	subs	r5, r1, #1
 8004162:	4355      	muls	r5, r2
 8004164:	460e      	mov	r6, r1
 8004166:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800416a:	f000 f997 	bl	800449c <_malloc_r>
 800416e:	4604      	mov	r4, r0
 8004170:	b140      	cbz	r0, 8004184 <__sfmoreglue+0x28>
 8004172:	2100      	movs	r1, #0
 8004174:	e9c0 1600 	strd	r1, r6, [r0]
 8004178:	300c      	adds	r0, #12
 800417a:	60a0      	str	r0, [r4, #8]
 800417c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004180:	f7ff fdc2 	bl	8003d08 <memset>
 8004184:	4620      	mov	r0, r4
 8004186:	bd70      	pop	{r4, r5, r6, pc}

08004188 <__sfp_lock_acquire>:
 8004188:	4801      	ldr	r0, [pc, #4]	; (8004190 <__sfp_lock_acquire+0x8>)
 800418a:	f000 b8b3 	b.w	80042f4 <__retarget_lock_acquire_recursive>
 800418e:	bf00      	nop
 8004190:	20000125 	.word	0x20000125

08004194 <__sfp_lock_release>:
 8004194:	4801      	ldr	r0, [pc, #4]	; (800419c <__sfp_lock_release+0x8>)
 8004196:	f000 b8ae 	b.w	80042f6 <__retarget_lock_release_recursive>
 800419a:	bf00      	nop
 800419c:	20000125 	.word	0x20000125

080041a0 <__sinit_lock_acquire>:
 80041a0:	4801      	ldr	r0, [pc, #4]	; (80041a8 <__sinit_lock_acquire+0x8>)
 80041a2:	f000 b8a7 	b.w	80042f4 <__retarget_lock_acquire_recursive>
 80041a6:	bf00      	nop
 80041a8:	20000126 	.word	0x20000126

080041ac <__sinit_lock_release>:
 80041ac:	4801      	ldr	r0, [pc, #4]	; (80041b4 <__sinit_lock_release+0x8>)
 80041ae:	f000 b8a2 	b.w	80042f6 <__retarget_lock_release_recursive>
 80041b2:	bf00      	nop
 80041b4:	20000126 	.word	0x20000126

080041b8 <__sinit>:
 80041b8:	b510      	push	{r4, lr}
 80041ba:	4604      	mov	r4, r0
 80041bc:	f7ff fff0 	bl	80041a0 <__sinit_lock_acquire>
 80041c0:	69a3      	ldr	r3, [r4, #24]
 80041c2:	b11b      	cbz	r3, 80041cc <__sinit+0x14>
 80041c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c8:	f7ff bff0 	b.w	80041ac <__sinit_lock_release>
 80041cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041d0:	6523      	str	r3, [r4, #80]	; 0x50
 80041d2:	4b13      	ldr	r3, [pc, #76]	; (8004220 <__sinit+0x68>)
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <__sinit+0x6c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80041da:	42a3      	cmp	r3, r4
 80041dc:	bf04      	itt	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	61a3      	streq	r3, [r4, #24]
 80041e2:	4620      	mov	r0, r4
 80041e4:	f000 f820 	bl	8004228 <__sfp>
 80041e8:	6060      	str	r0, [r4, #4]
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 f81c 	bl	8004228 <__sfp>
 80041f0:	60a0      	str	r0, [r4, #8]
 80041f2:	4620      	mov	r0, r4
 80041f4:	f000 f818 	bl	8004228 <__sfp>
 80041f8:	2200      	movs	r2, #0
 80041fa:	60e0      	str	r0, [r4, #12]
 80041fc:	2104      	movs	r1, #4
 80041fe:	6860      	ldr	r0, [r4, #4]
 8004200:	f7ff ff82 	bl	8004108 <std>
 8004204:	68a0      	ldr	r0, [r4, #8]
 8004206:	2201      	movs	r2, #1
 8004208:	2109      	movs	r1, #9
 800420a:	f7ff ff7d 	bl	8004108 <std>
 800420e:	68e0      	ldr	r0, [r4, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	2112      	movs	r1, #18
 8004214:	f7ff ff78 	bl	8004108 <std>
 8004218:	2301      	movs	r3, #1
 800421a:	61a3      	str	r3, [r4, #24]
 800421c:	e7d2      	b.n	80041c4 <__sinit+0xc>
 800421e:	bf00      	nop
 8004220:	08004774 	.word	0x08004774
 8004224:	08004151 	.word	0x08004151

08004228 <__sfp>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	4607      	mov	r7, r0
 800422c:	f7ff ffac 	bl	8004188 <__sfp_lock_acquire>
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <__sfp+0x84>)
 8004232:	681e      	ldr	r6, [r3, #0]
 8004234:	69b3      	ldr	r3, [r6, #24]
 8004236:	b913      	cbnz	r3, 800423e <__sfp+0x16>
 8004238:	4630      	mov	r0, r6
 800423a:	f7ff ffbd 	bl	80041b8 <__sinit>
 800423e:	3648      	adds	r6, #72	; 0x48
 8004240:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004244:	3b01      	subs	r3, #1
 8004246:	d503      	bpl.n	8004250 <__sfp+0x28>
 8004248:	6833      	ldr	r3, [r6, #0]
 800424a:	b30b      	cbz	r3, 8004290 <__sfp+0x68>
 800424c:	6836      	ldr	r6, [r6, #0]
 800424e:	e7f7      	b.n	8004240 <__sfp+0x18>
 8004250:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004254:	b9d5      	cbnz	r5, 800428c <__sfp+0x64>
 8004256:	4b16      	ldr	r3, [pc, #88]	; (80042b0 <__sfp+0x88>)
 8004258:	60e3      	str	r3, [r4, #12]
 800425a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800425e:	6665      	str	r5, [r4, #100]	; 0x64
 8004260:	f000 f847 	bl	80042f2 <__retarget_lock_init_recursive>
 8004264:	f7ff ff96 	bl	8004194 <__sfp_lock_release>
 8004268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800426c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004270:	6025      	str	r5, [r4, #0]
 8004272:	61a5      	str	r5, [r4, #24]
 8004274:	2208      	movs	r2, #8
 8004276:	4629      	mov	r1, r5
 8004278:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800427c:	f7ff fd44 	bl	8003d08 <memset>
 8004280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004284:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004288:	4620      	mov	r0, r4
 800428a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428c:	3468      	adds	r4, #104	; 0x68
 800428e:	e7d9      	b.n	8004244 <__sfp+0x1c>
 8004290:	2104      	movs	r1, #4
 8004292:	4638      	mov	r0, r7
 8004294:	f7ff ff62 	bl	800415c <__sfmoreglue>
 8004298:	4604      	mov	r4, r0
 800429a:	6030      	str	r0, [r6, #0]
 800429c:	2800      	cmp	r0, #0
 800429e:	d1d5      	bne.n	800424c <__sfp+0x24>
 80042a0:	f7ff ff78 	bl	8004194 <__sfp_lock_release>
 80042a4:	230c      	movs	r3, #12
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	e7ee      	b.n	8004288 <__sfp+0x60>
 80042aa:	bf00      	nop
 80042ac:	08004774 	.word	0x08004774
 80042b0:	ffff0001 	.word	0xffff0001

080042b4 <_fwalk_reent>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	4606      	mov	r6, r0
 80042ba:	4688      	mov	r8, r1
 80042bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042c0:	2700      	movs	r7, #0
 80042c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042c6:	f1b9 0901 	subs.w	r9, r9, #1
 80042ca:	d505      	bpl.n	80042d8 <_fwalk_reent+0x24>
 80042cc:	6824      	ldr	r4, [r4, #0]
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	d1f7      	bne.n	80042c2 <_fwalk_reent+0xe>
 80042d2:	4638      	mov	r0, r7
 80042d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d8:	89ab      	ldrh	r3, [r5, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d907      	bls.n	80042ee <_fwalk_reent+0x3a>
 80042de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042e2:	3301      	adds	r3, #1
 80042e4:	d003      	beq.n	80042ee <_fwalk_reent+0x3a>
 80042e6:	4629      	mov	r1, r5
 80042e8:	4630      	mov	r0, r6
 80042ea:	47c0      	blx	r8
 80042ec:	4307      	orrs	r7, r0
 80042ee:	3568      	adds	r5, #104	; 0x68
 80042f0:	e7e9      	b.n	80042c6 <_fwalk_reent+0x12>

080042f2 <__retarget_lock_init_recursive>:
 80042f2:	4770      	bx	lr

080042f4 <__retarget_lock_acquire_recursive>:
 80042f4:	4770      	bx	lr

080042f6 <__retarget_lock_release_recursive>:
 80042f6:	4770      	bx	lr

080042f8 <__swhatbuf_r>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	460e      	mov	r6, r1
 80042fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004300:	2900      	cmp	r1, #0
 8004302:	b096      	sub	sp, #88	; 0x58
 8004304:	4614      	mov	r4, r2
 8004306:	461d      	mov	r5, r3
 8004308:	da08      	bge.n	800431c <__swhatbuf_r+0x24>
 800430a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	061a      	lsls	r2, r3, #24
 8004314:	d410      	bmi.n	8004338 <__swhatbuf_r+0x40>
 8004316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431a:	e00e      	b.n	800433a <__swhatbuf_r+0x42>
 800431c:	466a      	mov	r2, sp
 800431e:	f000 f9a7 	bl	8004670 <_fstat_r>
 8004322:	2800      	cmp	r0, #0
 8004324:	dbf1      	blt.n	800430a <__swhatbuf_r+0x12>
 8004326:	9a01      	ldr	r2, [sp, #4]
 8004328:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800432c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004330:	425a      	negs	r2, r3
 8004332:	415a      	adcs	r2, r3
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	e7ee      	b.n	8004316 <__swhatbuf_r+0x1e>
 8004338:	2340      	movs	r3, #64	; 0x40
 800433a:	2000      	movs	r0, #0
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	b016      	add	sp, #88	; 0x58
 8004340:	bd70      	pop	{r4, r5, r6, pc}
	...

08004344 <__smakebuf_r>:
 8004344:	898b      	ldrh	r3, [r1, #12]
 8004346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004348:	079d      	lsls	r5, r3, #30
 800434a:	4606      	mov	r6, r0
 800434c:	460c      	mov	r4, r1
 800434e:	d507      	bpl.n	8004360 <__smakebuf_r+0x1c>
 8004350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	6123      	str	r3, [r4, #16]
 8004358:	2301      	movs	r3, #1
 800435a:	6163      	str	r3, [r4, #20]
 800435c:	b002      	add	sp, #8
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	ab01      	add	r3, sp, #4
 8004362:	466a      	mov	r2, sp
 8004364:	f7ff ffc8 	bl	80042f8 <__swhatbuf_r>
 8004368:	9900      	ldr	r1, [sp, #0]
 800436a:	4605      	mov	r5, r0
 800436c:	4630      	mov	r0, r6
 800436e:	f000 f895 	bl	800449c <_malloc_r>
 8004372:	b948      	cbnz	r0, 8004388 <__smakebuf_r+0x44>
 8004374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004378:	059a      	lsls	r2, r3, #22
 800437a:	d4ef      	bmi.n	800435c <__smakebuf_r+0x18>
 800437c:	f023 0303 	bic.w	r3, r3, #3
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	e7e3      	b.n	8004350 <__smakebuf_r+0xc>
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <__smakebuf_r+0x7c>)
 800438a:	62b3      	str	r3, [r6, #40]	; 0x28
 800438c:	89a3      	ldrh	r3, [r4, #12]
 800438e:	6020      	str	r0, [r4, #0]
 8004390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	9b00      	ldr	r3, [sp, #0]
 8004398:	6163      	str	r3, [r4, #20]
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	6120      	str	r0, [r4, #16]
 800439e:	b15b      	cbz	r3, 80043b8 <__smakebuf_r+0x74>
 80043a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a4:	4630      	mov	r0, r6
 80043a6:	f000 f975 	bl	8004694 <_isatty_r>
 80043aa:	b128      	cbz	r0, 80043b8 <__smakebuf_r+0x74>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	89a0      	ldrh	r0, [r4, #12]
 80043ba:	4305      	orrs	r5, r0
 80043bc:	81a5      	strh	r5, [r4, #12]
 80043be:	e7cd      	b.n	800435c <__smakebuf_r+0x18>
 80043c0:	08004151 	.word	0x08004151

080043c4 <_free_r>:
 80043c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043c6:	2900      	cmp	r1, #0
 80043c8:	d044      	beq.n	8004454 <_free_r+0x90>
 80043ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043ce:	9001      	str	r0, [sp, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f1a1 0404 	sub.w	r4, r1, #4
 80043d6:	bfb8      	it	lt
 80043d8:	18e4      	addlt	r4, r4, r3
 80043da:	f000 f97d 	bl	80046d8 <__malloc_lock>
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <_free_r+0x94>)
 80043e0:	9801      	ldr	r0, [sp, #4]
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	b933      	cbnz	r3, 80043f4 <_free_r+0x30>
 80043e6:	6063      	str	r3, [r4, #4]
 80043e8:	6014      	str	r4, [r2, #0]
 80043ea:	b003      	add	sp, #12
 80043ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f0:	f000 b978 	b.w	80046e4 <__malloc_unlock>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d908      	bls.n	800440a <_free_r+0x46>
 80043f8:	6825      	ldr	r5, [r4, #0]
 80043fa:	1961      	adds	r1, r4, r5
 80043fc:	428b      	cmp	r3, r1
 80043fe:	bf01      	itttt	eq
 8004400:	6819      	ldreq	r1, [r3, #0]
 8004402:	685b      	ldreq	r3, [r3, #4]
 8004404:	1949      	addeq	r1, r1, r5
 8004406:	6021      	streq	r1, [r4, #0]
 8004408:	e7ed      	b.n	80043e6 <_free_r+0x22>
 800440a:	461a      	mov	r2, r3
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b10b      	cbz	r3, 8004414 <_free_r+0x50>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d9fa      	bls.n	800440a <_free_r+0x46>
 8004414:	6811      	ldr	r1, [r2, #0]
 8004416:	1855      	adds	r5, r2, r1
 8004418:	42a5      	cmp	r5, r4
 800441a:	d10b      	bne.n	8004434 <_free_r+0x70>
 800441c:	6824      	ldr	r4, [r4, #0]
 800441e:	4421      	add	r1, r4
 8004420:	1854      	adds	r4, r2, r1
 8004422:	42a3      	cmp	r3, r4
 8004424:	6011      	str	r1, [r2, #0]
 8004426:	d1e0      	bne.n	80043ea <_free_r+0x26>
 8004428:	681c      	ldr	r4, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	6053      	str	r3, [r2, #4]
 800442e:	4421      	add	r1, r4
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	e7da      	b.n	80043ea <_free_r+0x26>
 8004434:	d902      	bls.n	800443c <_free_r+0x78>
 8004436:	230c      	movs	r3, #12
 8004438:	6003      	str	r3, [r0, #0]
 800443a:	e7d6      	b.n	80043ea <_free_r+0x26>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf04      	itt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	bf04      	itt	eq
 800444c:	1949      	addeq	r1, r1, r5
 800444e:	6021      	streq	r1, [r4, #0]
 8004450:	6054      	str	r4, [r2, #4]
 8004452:	e7ca      	b.n	80043ea <_free_r+0x26>
 8004454:	b003      	add	sp, #12
 8004456:	bd30      	pop	{r4, r5, pc}
 8004458:	20000128 	.word	0x20000128

0800445c <sbrk_aligned>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4e0e      	ldr	r6, [pc, #56]	; (8004498 <sbrk_aligned+0x3c>)
 8004460:	460c      	mov	r4, r1
 8004462:	6831      	ldr	r1, [r6, #0]
 8004464:	4605      	mov	r5, r0
 8004466:	b911      	cbnz	r1, 800446e <sbrk_aligned+0x12>
 8004468:	f000 f88c 	bl	8004584 <_sbrk_r>
 800446c:	6030      	str	r0, [r6, #0]
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 f887 	bl	8004584 <_sbrk_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d00a      	beq.n	8004490 <sbrk_aligned+0x34>
 800447a:	1cc4      	adds	r4, r0, #3
 800447c:	f024 0403 	bic.w	r4, r4, #3
 8004480:	42a0      	cmp	r0, r4
 8004482:	d007      	beq.n	8004494 <sbrk_aligned+0x38>
 8004484:	1a21      	subs	r1, r4, r0
 8004486:	4628      	mov	r0, r5
 8004488:	f000 f87c 	bl	8004584 <_sbrk_r>
 800448c:	3001      	adds	r0, #1
 800448e:	d101      	bne.n	8004494 <sbrk_aligned+0x38>
 8004490:	f04f 34ff 	mov.w	r4, #4294967295
 8004494:	4620      	mov	r0, r4
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	2000012c 	.word	0x2000012c

0800449c <_malloc_r>:
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	1ccd      	adds	r5, r1, #3
 80044a2:	f025 0503 	bic.w	r5, r5, #3
 80044a6:	3508      	adds	r5, #8
 80044a8:	2d0c      	cmp	r5, #12
 80044aa:	bf38      	it	cc
 80044ac:	250c      	movcc	r5, #12
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	4607      	mov	r7, r0
 80044b2:	db01      	blt.n	80044b8 <_malloc_r+0x1c>
 80044b4:	42a9      	cmp	r1, r5
 80044b6:	d905      	bls.n	80044c4 <_malloc_r+0x28>
 80044b8:	230c      	movs	r3, #12
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	2600      	movs	r6, #0
 80044be:	4630      	mov	r0, r6
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c4:	4e2e      	ldr	r6, [pc, #184]	; (8004580 <_malloc_r+0xe4>)
 80044c6:	f000 f907 	bl	80046d8 <__malloc_lock>
 80044ca:	6833      	ldr	r3, [r6, #0]
 80044cc:	461c      	mov	r4, r3
 80044ce:	bb34      	cbnz	r4, 800451e <_malloc_r+0x82>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ffc2 	bl	800445c <sbrk_aligned>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	4604      	mov	r4, r0
 80044dc:	d14d      	bne.n	800457a <_malloc_r+0xde>
 80044de:	6834      	ldr	r4, [r6, #0]
 80044e0:	4626      	mov	r6, r4
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	d140      	bne.n	8004568 <_malloc_r+0xcc>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	4631      	mov	r1, r6
 80044ea:	4638      	mov	r0, r7
 80044ec:	eb04 0803 	add.w	r8, r4, r3
 80044f0:	f000 f848 	bl	8004584 <_sbrk_r>
 80044f4:	4580      	cmp	r8, r0
 80044f6:	d13a      	bne.n	800456e <_malloc_r+0xd2>
 80044f8:	6821      	ldr	r1, [r4, #0]
 80044fa:	3503      	adds	r5, #3
 80044fc:	1a6d      	subs	r5, r5, r1
 80044fe:	f025 0503 	bic.w	r5, r5, #3
 8004502:	3508      	adds	r5, #8
 8004504:	2d0c      	cmp	r5, #12
 8004506:	bf38      	it	cc
 8004508:	250c      	movcc	r5, #12
 800450a:	4629      	mov	r1, r5
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff ffa5 	bl	800445c <sbrk_aligned>
 8004512:	3001      	adds	r0, #1
 8004514:	d02b      	beq.n	800456e <_malloc_r+0xd2>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	442b      	add	r3, r5
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	e00e      	b.n	800453c <_malloc_r+0xa0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	1b52      	subs	r2, r2, r5
 8004522:	d41e      	bmi.n	8004562 <_malloc_r+0xc6>
 8004524:	2a0b      	cmp	r2, #11
 8004526:	d916      	bls.n	8004556 <_malloc_r+0xba>
 8004528:	1961      	adds	r1, r4, r5
 800452a:	42a3      	cmp	r3, r4
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	bf18      	it	ne
 8004530:	6059      	strne	r1, [r3, #4]
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	bf08      	it	eq
 8004536:	6031      	streq	r1, [r6, #0]
 8004538:	5162      	str	r2, [r4, r5]
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	4638      	mov	r0, r7
 800453e:	f104 060b 	add.w	r6, r4, #11
 8004542:	f000 f8cf 	bl	80046e4 <__malloc_unlock>
 8004546:	f026 0607 	bic.w	r6, r6, #7
 800454a:	1d23      	adds	r3, r4, #4
 800454c:	1af2      	subs	r2, r6, r3
 800454e:	d0b6      	beq.n	80044be <_malloc_r+0x22>
 8004550:	1b9b      	subs	r3, r3, r6
 8004552:	50a3      	str	r3, [r4, r2]
 8004554:	e7b3      	b.n	80044be <_malloc_r+0x22>
 8004556:	6862      	ldr	r2, [r4, #4]
 8004558:	42a3      	cmp	r3, r4
 800455a:	bf0c      	ite	eq
 800455c:	6032      	streq	r2, [r6, #0]
 800455e:	605a      	strne	r2, [r3, #4]
 8004560:	e7ec      	b.n	800453c <_malloc_r+0xa0>
 8004562:	4623      	mov	r3, r4
 8004564:	6864      	ldr	r4, [r4, #4]
 8004566:	e7b2      	b.n	80044ce <_malloc_r+0x32>
 8004568:	4634      	mov	r4, r6
 800456a:	6876      	ldr	r6, [r6, #4]
 800456c:	e7b9      	b.n	80044e2 <_malloc_r+0x46>
 800456e:	230c      	movs	r3, #12
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	4638      	mov	r0, r7
 8004574:	f000 f8b6 	bl	80046e4 <__malloc_unlock>
 8004578:	e7a1      	b.n	80044be <_malloc_r+0x22>
 800457a:	6025      	str	r5, [r4, #0]
 800457c:	e7de      	b.n	800453c <_malloc_r+0xa0>
 800457e:	bf00      	nop
 8004580:	20000128 	.word	0x20000128

08004584 <_sbrk_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_sbrk_r+0x1c>)
 8004588:	2300      	movs	r3, #0
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	602b      	str	r3, [r5, #0]
 8004590:	f7fc f870 	bl	8000674 <_sbrk>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_sbrk_r+0x1a>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_sbrk_r+0x1a>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000130 	.word	0x20000130

080045a4 <__sread>:
 80045a4:	b510      	push	{r4, lr}
 80045a6:	460c      	mov	r4, r1
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	f000 f8a0 	bl	80046f0 <_read_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	bfab      	itete	ge
 80045b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045b6:	89a3      	ldrhlt	r3, [r4, #12]
 80045b8:	181b      	addge	r3, r3, r0
 80045ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045be:	bfac      	ite	ge
 80045c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80045c2:	81a3      	strhlt	r3, [r4, #12]
 80045c4:	bd10      	pop	{r4, pc}

080045c6 <__swrite>:
 80045c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ca:	461f      	mov	r7, r3
 80045cc:	898b      	ldrh	r3, [r1, #12]
 80045ce:	05db      	lsls	r3, r3, #23
 80045d0:	4605      	mov	r5, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	4616      	mov	r6, r2
 80045d6:	d505      	bpl.n	80045e4 <__swrite+0x1e>
 80045d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045dc:	2302      	movs	r3, #2
 80045de:	2200      	movs	r2, #0
 80045e0:	f000 f868 	bl	80046b4 <_lseek_r>
 80045e4:	89a3      	ldrh	r3, [r4, #12]
 80045e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ee:	81a3      	strh	r3, [r4, #12]
 80045f0:	4632      	mov	r2, r6
 80045f2:	463b      	mov	r3, r7
 80045f4:	4628      	mov	r0, r5
 80045f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fa:	f000 b817 	b.w	800462c <_write_r>

080045fe <__sseek>:
 80045fe:	b510      	push	{r4, lr}
 8004600:	460c      	mov	r4, r1
 8004602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004606:	f000 f855 	bl	80046b4 <_lseek_r>
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	bf15      	itete	ne
 8004610:	6560      	strne	r0, [r4, #84]	; 0x54
 8004612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800461a:	81a3      	strheq	r3, [r4, #12]
 800461c:	bf18      	it	ne
 800461e:	81a3      	strhne	r3, [r4, #12]
 8004620:	bd10      	pop	{r4, pc}

08004622 <__sclose>:
 8004622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004626:	f000 b813 	b.w	8004650 <_close_r>
	...

0800462c <_write_r>:
 800462c:	b538      	push	{r3, r4, r5, lr}
 800462e:	4d07      	ldr	r5, [pc, #28]	; (800464c <_write_r+0x20>)
 8004630:	4604      	mov	r4, r0
 8004632:	4608      	mov	r0, r1
 8004634:	4611      	mov	r1, r2
 8004636:	2200      	movs	r2, #0
 8004638:	602a      	str	r2, [r5, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f7fb ffc9 	bl	80005d2 <_write>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d102      	bne.n	800464a <_write_r+0x1e>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	b103      	cbz	r3, 800464a <_write_r+0x1e>
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	bd38      	pop	{r3, r4, r5, pc}
 800464c:	20000130 	.word	0x20000130

08004650 <_close_r>:
 8004650:	b538      	push	{r3, r4, r5, lr}
 8004652:	4d06      	ldr	r5, [pc, #24]	; (800466c <_close_r+0x1c>)
 8004654:	2300      	movs	r3, #0
 8004656:	4604      	mov	r4, r0
 8004658:	4608      	mov	r0, r1
 800465a:	602b      	str	r3, [r5, #0]
 800465c:	f7fb ffd5 	bl	800060a <_close>
 8004660:	1c43      	adds	r3, r0, #1
 8004662:	d102      	bne.n	800466a <_close_r+0x1a>
 8004664:	682b      	ldr	r3, [r5, #0]
 8004666:	b103      	cbz	r3, 800466a <_close_r+0x1a>
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	bd38      	pop	{r3, r4, r5, pc}
 800466c:	20000130 	.word	0x20000130

08004670 <_fstat_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4d07      	ldr	r5, [pc, #28]	; (8004690 <_fstat_r+0x20>)
 8004674:	2300      	movs	r3, #0
 8004676:	4604      	mov	r4, r0
 8004678:	4608      	mov	r0, r1
 800467a:	4611      	mov	r1, r2
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	f7fb ffd0 	bl	8000622 <_fstat>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d102      	bne.n	800468c <_fstat_r+0x1c>
 8004686:	682b      	ldr	r3, [r5, #0]
 8004688:	b103      	cbz	r3, 800468c <_fstat_r+0x1c>
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	bd38      	pop	{r3, r4, r5, pc}
 800468e:	bf00      	nop
 8004690:	20000130 	.word	0x20000130

08004694 <_isatty_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	4d06      	ldr	r5, [pc, #24]	; (80046b0 <_isatty_r+0x1c>)
 8004698:	2300      	movs	r3, #0
 800469a:	4604      	mov	r4, r0
 800469c:	4608      	mov	r0, r1
 800469e:	602b      	str	r3, [r5, #0]
 80046a0:	f7fb ffcf 	bl	8000642 <_isatty>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_isatty_r+0x1a>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_isatty_r+0x1a>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	20000130 	.word	0x20000130

080046b4 <_lseek_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d07      	ldr	r5, [pc, #28]	; (80046d4 <_lseek_r+0x20>)
 80046b8:	4604      	mov	r4, r0
 80046ba:	4608      	mov	r0, r1
 80046bc:	4611      	mov	r1, r2
 80046be:	2200      	movs	r2, #0
 80046c0:	602a      	str	r2, [r5, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f7fb ffc8 	bl	8000658 <_lseek>
 80046c8:	1c43      	adds	r3, r0, #1
 80046ca:	d102      	bne.n	80046d2 <_lseek_r+0x1e>
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	b103      	cbz	r3, 80046d2 <_lseek_r+0x1e>
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
 80046d4:	20000130 	.word	0x20000130

080046d8 <__malloc_lock>:
 80046d8:	4801      	ldr	r0, [pc, #4]	; (80046e0 <__malloc_lock+0x8>)
 80046da:	f7ff be0b 	b.w	80042f4 <__retarget_lock_acquire_recursive>
 80046de:	bf00      	nop
 80046e0:	20000124 	.word	0x20000124

080046e4 <__malloc_unlock>:
 80046e4:	4801      	ldr	r0, [pc, #4]	; (80046ec <__malloc_unlock+0x8>)
 80046e6:	f7ff be06 	b.w	80042f6 <__retarget_lock_release_recursive>
 80046ea:	bf00      	nop
 80046ec:	20000124 	.word	0x20000124

080046f0 <_read_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4d07      	ldr	r5, [pc, #28]	; (8004710 <_read_r+0x20>)
 80046f4:	4604      	mov	r4, r0
 80046f6:	4608      	mov	r0, r1
 80046f8:	4611      	mov	r1, r2
 80046fa:	2200      	movs	r2, #0
 80046fc:	602a      	str	r2, [r5, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f7fb ff4a 	bl	8000598 <_read>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_read_r+0x1e>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_read_r+0x1e>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	20000130 	.word	0x20000130

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
